<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andy&#39;s blog</title>
  
  <subtitle>面向小白编程！</subtitle>
  <link href="https://shuoandy.github.io/atom.xml" rel="self"/>
  
  <link href="https://shuoandy.github.io/"/>
  <updated>2023-06-10T13:35:00.900Z</updated>
  <id>https://shuoandy.github.io/</id>
  
  <author>
    <name>Andy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网原个人题库</title>
    <link href="https://shuoandy.github.io/2023/06/10/wy/"/>
    <id>https://shuoandy.github.io/2023/06/10/wy/</id>
    <published>2023-06-10T09:50:08.120Z</published>
    <updated>2023-06-10T13:35:00.900Z</updated>
    
    <content type="html"><![CDATA[<h3 id="【复杂】在选择性重传协议中，发送方窗口大小为2，接收方窗口当前状态为-4-5-6-7-，则发送方窗口此时的下界可以是？"><a href="#【复杂】在选择性重传协议中，发送方窗口大小为2，接收方窗口当前状态为-4-5-6-7-，则发送方窗口此时的下界可以是？" class="headerlink" title="【复杂】在选择性重传协议中，发送方窗口大小为2，接收方窗口当前状态为[4 5 6 7]，则发送方窗口此时的下界可以是？"></a>【复杂】在选择性重传协议中，发送方窗口大小为2，接收方窗口当前状态为[4 5 6 7]，则发送方窗口此时的下界可以是？</h3><p>2，3，4都有可能。</p><p>首先要明确的是，发送窗口下界为未收到确认的最小帧序号；上界为下一个要发的帧序号（还没有发）。比如下界2上界4的窗口代表已经发了2和3，2还在等待确认，4还没发。故而发送窗口下界增加&#x3D;收到了ack，发送窗口上界增加&#x3D;新发一个帧。接收窗口的上下界表示希望接收的最大&#x2F;最小帧序号，每当接收方发送ack就把上下界都加一。</p><p>回到本题，正常情况下应该是下界4上界6的窗口（此时发送端正在等待接收方收到它的4和5，并传回ack）。但是下界2或者下界3也有可能，假若它发送了2和3，接收端收到并发送ack2和ack3，此时接收端不管发送端的死活就把窗口下界加到4了，但是ack2丢了，发送端就不能增加下界。</p><p>值得注意的是，下界5是不可能的，因为发送窗口下界5表示它收到了ack5，但是倘若接收端真的发了ack5其下界应当加到5。这也说明（倘若不考虑循环）接收窗口的下界永远不可能小于（或者说慢于）发送窗口的下界。</p><p>发送和接收窗口的上下界的概念有些迷惑（博主也没太懂），主要还是掌握窗口内有哪几个序号就行应该。</p><br><h3 id="【简单】255-255-240-0网段有多少可用IP？"><a href="#【简单】255-255-240-0网段有多少可用IP？" class="headerlink" title="【简单】255.255.240.0网段有多少可用IP？"></a>【简单】255.255.240.0网段有多少可用IP？</h3><p>4094。这道题主要需要注意主机号全0为子网码，全1为广播，这两个不能用于IP。所以共有2^12-2&#x3D;4094个IP。</p><br><h3 id="【简单】TCP基于消息流？"><a href="#【简单】TCP基于消息流？" class="headerlink" title="【简单】TCP基于消息流？"></a>【简单】TCP基于消息流？</h3><p>TCP基于字节流。</p><p>“TCP 把应用程序交下来的数据看成仅仅是一连串无结构的字节流。接收方应用程序收到的字节流和发送方应用程序发出的字节顺序完全一样”</p><br><h3 id="【简单】FTP会话全过程，会建立几次控制连接，几次数据连接？"><a href="#【简单】FTP会话全过程，会建立几次控制连接，几次数据连接？" class="headerlink" title="【简单】FTP会话全过程，会建立几次控制连接，几次数据连接？"></a>【简单】FTP会话全过程，会建立几次控制连接，几次数据连接？</h3><p>1次控制连接，N次数据连接。</p><p>“控制连接（服务器TCP21端口）在整个会话期间一直保持”</p><br><h3 id="【简单】除了带宽和延迟以外，服务质量QoS与什么有关？"><a href="#【简单】除了带宽和延迟以外，服务质量QoS与什么有关？" class="headerlink" title="【简单】除了带宽和延迟以外，服务质量QoS与什么有关？"></a>【简单】除了带宽和延迟以外，服务质量QoS与什么有关？</h3><p>抖动和丢包率。</p><br><h3 id="【略复杂】如果在一条3kHz的信道上发送一个二进制信号，该信道的信噪比为20dB，则最大可达到的数据传输率为多少？"><a href="#【略复杂】如果在一条3kHz的信道上发送一个二进制信号，该信道的信噪比为20dB，则最大可达到的数据传输率为多少？" class="headerlink" title="【略复杂】如果在一条3kHz的信道上发送一个二进制信号，该信道的信噪比为20dB，则最大可达到的数据传输率为多少？"></a>【略复杂】如果在一条3kHz的信道上发送一个二进制信号，该信道的信噪比为20dB，则最大可达到的数据传输率为多少？</h3><p>首先计算香农定律：信噪比的单位为分贝时，需要用10*log_10 (S&#x2F;N)来计算，即S&#x2F;N为100。故而香农定律对其的限制为19.97kbps。</p><p><strong>再计算Nyquist定律，二进制信号即为课件所写的信号电平分为2级，故对其的限制为6kbps。</strong></p><p>取两者之中的最小值，答案为6kbps。请注意习题课中并没有提到需要考虑Nyquist定律，因为习题课的那道题并没有传输具体的N级信号，也就无需计算之。</p><br><h3 id="【一个知识】CSMA-x2F-CD是基于1-坚持型CSMA改进的，而非p-坚持型或非坚持型。"><a href="#【一个知识】CSMA-x2F-CD是基于1-坚持型CSMA改进的，而非p-坚持型或非坚持型。" class="headerlink" title="【一个知识】CSMA&#x2F;CD是基于1-坚持型CSMA改进的，而非p-坚持型或非坚持型。"></a>【一个知识】CSMA&#x2F;CD是基于1-坚持型CSMA改进的，而非p-坚持型或非坚持型。</h3><br><h3 id="【复杂】在TCP协议中，使用慢启动算法和拥塞避免算法进行拥塞控制。假设网络负载非常稳定，在一个TCP连接中，每当拥塞窗口大小达到W时就会丢包，W-x3D-2-n-（n是正整数）。假设每个TCP段的长度都是最大发送段长MSS，段的发送和接收时间可以忽略，RTT（Round-Trip-Time）为常量，并且有足够多的数据要发送。求平均传输速率。"><a href="#【复杂】在TCP协议中，使用慢启动算法和拥塞避免算法进行拥塞控制。假设网络负载非常稳定，在一个TCP连接中，每当拥塞窗口大小达到W时就会丢包，W-x3D-2-n-（n是正整数）。假设每个TCP段的长度都是最大发送段长MSS，段的发送和接收时间可以忽略，RTT（Round-Trip-Time）为常量，并且有足够多的数据要发送。求平均传输速率。" class="headerlink" title="【复杂】在TCP协议中，使用慢启动算法和拥塞避免算法进行拥塞控制。假设网络负载非常稳定，在一个TCP连接中，每当拥塞窗口大小达到W时就会丢包，W &#x3D; 2^n （n是正整数）。假设每个TCP段的长度都是最大发送段长MSS，段的发送和接收时间可以忽略，RTT（Round Trip Time）为常量，并且有足够多的数据要发送。求平均传输速率。"></a>【复杂】在TCP协议中，使用慢启动算法和拥塞避免算法进行拥塞控制。假设网络负载非常稳定，在一个TCP连接中，每当拥塞窗口大小达到W时就会丢包，W &#x3D; 2^n （n是正整数）。假设每个TCP段的长度都是最大发送段长MSS，段的发送和接收时间可以忽略，RTT（Round Trip Time）为常量，并且有足够多的数据要发送。求平均传输速率。</h3><p>需要注意的是，这里的拥塞窗口没有KB的单位，所以指的应该是段的个数，即 2 ^ n * MSS。另外，这道题似乎用的是TCP Tahoe的方法，即不考虑TCP Reno的快速恢复（不再重新慢启动，而是直接从阈值开始线性增长）。</p><p>我们先计算慢启动阶段发送的数据量和时间：从初始的一个 MSS 到 W&#x2F;2 （也就是2 ^ (n - 1)个MSS），共发送 1 + 2 + 4 + … + 2 ^ (n – 1) &#x3D; 2 ^ n – 1个MSS，RTT个数为n个。</p><p>再计算线性增加（即所谓的拥塞避免算法）发送的数据量和时间：从 W&#x2F;2 （也就是2^(n - 1)个MSS）到 W（也就是2 ^ n个MSS），共发送2 ^ (2n – 2) + 2 ^ (2n – 3) + 2 ^ (n – 2)个MSS，RTT个数为2 ^ (n – 1)个。</p><p>综合两个阶段，我们得出平均传输速率大致为 (3W ^2 + 10W – 8) &#x2F; (4W + 8log_2 W) * (MSS &#x2F; RTT)。</p><p>近似等于0.75 W * MSS &#x2F; RTT 。<br><br></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;【复杂】在选择性重传协议中，发送方窗口大小为2，接收方窗口当前状态为-4-5-6-7-，则发送方窗口此时的下界可以是？&quot;&gt;&lt;a href=&quot;#【复杂】在选择性重传协议中，发送方窗口大小为2，接收方窗口当前状态为-4-5-6-7-，则发送方窗口此时的下界可以是？&quot; </summary>
      
    
    
    
    <category term="network" scheme="https://shuoandy.github.io/categories/network/"/>
    
    
    <category term="network" scheme="https://shuoandy.github.io/tags/network/"/>
    
  </entry>
  
  <entry>
    <title>情感分类代码</title>
    <link href="https://shuoandy.github.io/2023/06/05/Emotion/"/>
    <id>https://shuoandy.github.io/2023/06/05/Emotion/</id>
    <published>2023-06-04T16:00:00.000Z</published>
    <updated>2023-06-10T12:36:11.470Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="81bd5293a711785a4252ab550ed95b570b1f285afa89e09384b6c854cce2b8c8">27b90833956bfcbaac0ef4ff058e8812cc95a90a033ade5ebc2e9cb5328a43d2393c8df9646bbd85aa84e1a801241d19474b95d645338e2a5e78fb6ca50ead309e77a018c6d47486ab2686988e94624c0d7b5275cf848345a9a4157cdf7755800ba46c321f83e65a0b924daacc6a44f10e1bd32e2300dcfe3ff2e4b0d59502315152a6f1fcf3ad7f79451406a3eee8518d41895987533f6ed502ef42c70ae9e0c5d519224c92f56c9649891c28740ef8a2081d6e0757a1d378815a11ad974ffef3ee03381fe28181df1cae2a279f112a185e19a6afcf989cd1b08b4c98a3ca1c6a64a4f7048c294403d710d702eacaacd665249c287ee323318e2847ea9e646e289b236f55c9cb9cbb8cf7494bcb1f4789755de356c6a96df43406ed1cfc3c5d4dca9c97aaff247200995cb0232311e3a9e50f282a6dca26cdf1666a2c81a88e2a02d88f8f2d1a524fac847abc3b50a2462871b9f52913001b51d7628fc7a45e19aa1187ef3e42cc31ea284ae3f79a85acea419c13e5571c6656740a011b35d4746dd67dc606d9678de5f879ef3da984499a1df282b4c58497c6d25e3e65a31c56be4471b5fcc4c79e513e32d3e1a3707830edd0160a6329aa661f8f8c7dfe1800b1739568d54724778380aa4c6909ec72e2451ae24cca30f95db32073418a874da1bc05973e3a335be8069c28ba5b61e4aafbac41eda61fb9434f3edebc87351e99906b63726ecd59f0ea673450dc5b5ae839ac633e63e3eda036e9f2327818172b34531572360f77dd8494e4224d42518a9c3726d5568dd7ba9a1e7fc994e4ff89be115f16d3476110f79a2edf2bb74a54ef50cf4fa996a05d7a8d206cb56d96b895349710cccf3ce16ad8ed21e3567027113cfd735122ef2c9ccfe104dde1d137eea010d8c28ea3fbf68914945d091713132d42a6c3ff2e302566369b6f2b4817308e7d2276f9f70731f496582e8eecdcacf25bdfe3fdb7116307d45d4cf943fb1518e8d2252a7b1783af4d432595bad1e1cbe0b74542176fb53916cddeaa600bc8fd76486d7daa34c715c288c6ba30312a450585a89e0941c556b3196152363e74c72f2da0963a5e2eaba60f5ce2e6d735856aac8fca6e145c1d9a8b0e479f83b239acea33abc41b9039d5de723f21567f0f0c2254325d5fa030e9aa58ac09eb22f1d131a37713a5775f2997ca063409c958f47167d97f4f451f551ab779d79e770387c8148ce9ca1c6fe26b06a9fd599601bab23dbbf61d8d03421918ca436d17223ee12fa61dc645ebb01288396f399f974d9c5ef8f1626d720f73f8479fe51850ffe205b96b0e770332c58cde0b1d92bee36ff148e91a62d5330fbe73953d0365dfea0a3b268988635853fe211314d40c4e01c056c86b732f67759e1c98dcc6dcbf76533495fece31d1fec8898e9a8368f210c42073c6be21cd663d0157d9de5c0c1cbe30904348d7edd710c77959d6f1b7ac8fb82c857cb22f87437b942c40fcd8ed334ee967a9a5071c661ab9807416f1a3d31da4bd3863d342d0c257a4b46a02cf54ae00ca44af4165dc72fbd3d55cf934b6b877ae78cee489c7b96c48f68b275d017813854e2ad08bffd4e9b6ef189465b3cbef4615a1479211c1718e1b2ade26e0ddd0eb3c58c568d7bf4618918c9359ae20c02cd6849a73eec53a06e3b81ffecb0f7f49bfd6c939f23fef9d537d5c9612527bc9b2344e795eab491edbae9d677d4dc5513662c5e5503fa4d97d308e67a05001f414bdbf5568128335bbfe47425197b65f0e56fbfa4066e7deec9a2aa86ddcd579239a29a9786caf08e948dd5dc9763810bebc115f392abf86862d6650807b03701072ab87a78bd0aa34c4d82f8298a1862238f3445c351d490502339058f81cd93ce264b687c05392816f4bd3342d3c9fa2e718befd8603790f7d92fdbfdbac6b7cfbffff7a9e1a5c76e42faf3a5c4368591d00ea7b161b904ffb009e6618657bfc0393d38e2a360116afe950c3da77f06363385741cb3d467f8b9af6dd5957f0711dc03798d4c68b13869d9bdd49ebe85dbc07be40f12333e4ecb4a518c75fe9e4c35993284a63836c305b4748dd5d4b289e2685028c5329013684272d479b9250b2079a5ed944a5bd3b69a7623ee167f84c8382e8cfbcdfce68fd07368fb34c88c9dc301b0e67716bd4b0da6169e4f2222ec06badadcfe05a8156e702f18bd2ab38f7f7f59846846089dc4f80ac7997f88bb40335e1e654de3cdb388feebd138ba917f9b835274734f957c7de15c258e9a9e0117e1658f18c0ffb924d717a2e56af7290b3dfc5b3b30001cd69e7b90723c5a9b554ca6621b449494cd85c42e8a8639d51dd9e5e2de5030662a12cd41f67efc441244c742f4384f5944b1e1c353ba4f4cc8fa6c214aced6cb3d1f7c4f71f48e1e8fa9576554d6c80f03d9e29c92a2b64643e9223334776769348bde4547c601ed6b95edae43dd69dd35f9572cfaf7e6aa6c28dff544786c00179561d951f1f947b7b44d248c720a48feaa5c41fdcf6d87db6d68b56e500fadecabbb1a675322e0bff246fdeff9fa02e81159997d038636a3145dbbc89819c400dbb111435cdc03936592f325c4b52cc47566be34ecd4145765a2cbd4bbe0476fb572b1150623208f972a6c11eb43b40117c46dab018815246da8646a820edda818e0cba5af3a7c2c7d416e976fe5a1aff61e47ea3cfde926172bf56f89f27eec69da92a22e4e1abef0cd5d8a57268188e9d64fbb5b8eab2fd7bdcf1d12c0e4efd8b77f0aa1bc88882b7bb01c7454f8935ff2f64bb9628c0b1164d13565f0a9a97bbc32d1660229a247bc59efe5de8c5b3981c367749e817f78465693f59c58bfe997e28db138104d1f81556f46d9ca5e2a0e7b7bf8a066767701edc8748639aa0c006a7be406109a9998a18959c7a36a649afdd7b83e5439aa93ebb98ccf50698f012da6a54acb219ebad4a0271495fb2c9de73adee884de56701cf74244ad5c8c46f311cba7a5318788ffbbb9be3bfff7a905637c1d34559159d39491d258a93fcf357ccc6412aac049ca4f60ac774c5641a9abb8a7fe9bffa7aeb9b9f61405c9560ba9aae0712923f99e0b3a0f7b934a3fb2b8f27513022eff91268206b8b54aaca9d16fba75c812d31de740c45aa4ad37347d468dd1facf55a9b1c3a10e79c946e40c28dfae29ffe961465f59fb765a32daa767d15d395b02b30670aff0990b57b30d865c797c894b2a0fd2cdc1e0958739fa2cfdfe15e6264ba4fc04d45ed5f69969d71602ad060630ef76b117bab3216d8aa8351d8271d070e1ef6f2a483ff8222c1c8ac5ce207621ff9338ecbc75dd8882892236df476a874e53892e772be0a20b133ce94d7e5d050e906631c8e66e531d8b701ab9e6dea70b5cefebd5032b4f91fd4ba161157ef54d245d02a40e99ed5f76417eedccc4bdab732905f95bb439789395daf84492adaf27154879868dda6473ecb09a0b6e6ead2a52c26b96738854ff8cb600b8b1389bc1495c294b0645cf59d7a33441b154677b993a05bd7578ea13a573a14a057948cb1e1d433df9bc1824da50b8f091dd4bcabfc019e6e85530634c315cbfc20f57be68af884ddbd60afa30fcdd058</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>四子棋代码</title>
    <link href="https://shuoandy.github.io/2023/05/25/Connect4/"/>
    <id>https://shuoandy.github.io/2023/05/25/Connect4/</id>
    <published>2023-05-24T16:00:00.000Z</published>
    <updated>2023-06-10T12:36:08.276Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="86762d7fd55a6f82df4fd5e34b5a1441af6376ffee850f33f5e3887679e0e5c2">ab994b59af80911791e90480d81b4d904d5773e27cbc7014dae17db9d125b1ea7979f238da6543d892fe4b093ed7352fe893aef70f684e4787ba87845c530430113a952f17832a089113fa7d6f49c8c51525d0f2aa6229576cb32069e7395eec3b875060ef9e92402f94249120cafbf24fabe2935c855753fbf036bf1f8f50f17789da2f0626315deb3837d532eb6977b5f2373ab78a0d40a6f47d0d3109e354276ef08832ce742460cc02b462a8f68c126892dfc3d7a5ad019e530791fe670d04de358703f1de022e2162c365289a022f83030f0f53e62bc90a2d9f7eda44090a61209846361ccb51a285f6712565d660d74ab55800011fb05d50b743d2fd3fddeef61b1a7400588f0617ec2e862c5349fbe5eb65ded92046376c8e585565f87821441ba881f2f2a4607c2bb9b9a11b14585012e3a7dece09347c6585d69320d2b00d65a0084873ee14eca2791edb20c4c4502628b4212e20c50c418e3221662719d3910c276605bbbc0c2f119d59fac8995a0593a039ae404f3e436adaf44d937faa288d95e002b94d04fa16fd3747e3b141116a8ead8b9baf7fc9c40a5c22f295c0464df0abd5dc62c374afd8596c33783fb8a45f29d22d1dd5a12f3dc894b6b20e295ff6c771b567063b57fe8d8f9db2bcb8d73008557c59f1debbcfd4fabd26335014a6c316d7d905f40ea23d228c29f08074d3e70916ed4f23663046879e6a99f1bda5c1849d7be3623ac7fd9121c36d3a0753ba1e68e050acdf43d3274f73c2339152c8ed4d27a4df5a0ceb00a8e1f42d88253deef89465a9b6c2ba750fac28a07a268acc846b4311f74ae06602ffc9699b49efd775eeb41bf6224e46f451960a13310c11474c8828c776256ff8f96ae8b5ca8c830bd0e6056fdc4a73b761cfd4ee998dbeceb6777795126a73002e5ea9201f17a8f521fddd6f7b9ef4131738a555914cc6b8545373b166b5283118ecbee7f0a287a5f78fcdd1f11e945987af123380f44f7d4070d7928b7faeb845ec6bf01f2e97e3592d6a903396b9ccb15898b5c5ead77dd8570bb475815143563933a83e484b1e0d4be6b6d543d2545d74672ba0ac4e8f4ce3bf09d5cb4df1a59425973badeb4f44a2a7794a44b3caa6abf9e8fd90bfc1c4585a640a04213c3bf6e2aa606651b2ade57e8b92fb3115f0da36c37aa50ca4950ec0bac73c8e06d5411373eca082b1ec390b8f3e39dff7fea6435119a9071e745fc1be8a2581e229d3a863ef55a18bb8f505eb29287b3b63ed602c3cce7626e5d675c3d1466f11bf66ba0241ebd2ce32ba2c6421e868a733b46fa69d0800dab490903b66c17053abe2782c5e25430f0786f2b1fca7b7e23c168a11bf34c8801666ae3ed4bf13ee64a201463b6770e31ac996219290cd11218e5cc8ac3f27b0b03a43683c78f19c2eea9d903041afa8f58ebb8b083ad433d8b777a356b802f9cf53f1b695a83b7bd112d9616a126223a4890bdca67cd3b3445843c1b94d356c2f04a1d7aa3d207801efcfe9402b8a45e2285aca8b4ba4c6138ee16c3a63949040db03100373eae083b8c66ed54462fb063e624d0fbd2721cc11a21d135ae1d7fa67243a35da9b2baafe4d99a0543d68858fc42e4b3f471a357aa843b7a74fdda22788c04a7206269b98c0bc86811c7a856029672f9d05ccd541d0c0f0911c64fff0651af5de5d53c7b5217346e3460a311657faad430260338b1e0c394519e4b75cbcec0b2fc348f0d6291be3ebcc871ca0c36d18ce9311594d65e45a1f22d6946d3c0485ce59dc49f1c148e5d64396ac0f335f5df2c66add5030ce637de174ccc727e2aa4ae2669f16146292ec4e5936cb5279f9007ffb77bd51f95409cb54ecd37dd6226d9b5efcd4866223c33c016a5eea15b029e94dbebefce3c06e8931a541d10a5fe288af19f51007b4b799568573a92e1b5fa8570ace55a237c75e0e67cf5d32ae7541532164c158d9071f04b31579bde38bed3f5299ad10792abefaf1e651381254e51f5272ea267c2d010fa7cb7ecfd90132a79ebf2ae235c2e50db0c8812bc194c6aa778a78b9a03185a7599512d1e2698787bc0bfa894b4b64e842166103263e9b34b6453ca6321f1a54debe2ec860914b41b8a2749e81c14af69d123aea2bcdb20ec4312b275cef1458ef2248ea469b97aedb6b9f3010d83328d4dfd47851dd920a2a8e5a458b1db307dd56e316857f202d82ab3f41b36317d0744f30a9c0591c54cb79d217cdf384d3f086e5463a56941d6f888d8e94da569a319d1853fd37aa9dae34351cde06c7fb086176e6d30f76b604a3363d657a04eba1e80c828d0eb6de3e2311b8022371b1713bc4139d520045ec62627e5bf556563ee97af02f0d8ff3dd42a9277c3493d020e3c8d5b669e46f09eb069a672d124d2e61f90514ff7b927b18b1e801588de430c8c5d31be09425a4aa6846be56ec21f5007b17b6fc5885a6dbfc7d8bdc9183badd3ab2ae3fbcd970709866258ad8ef363e031a7619400897f8550d86408b5677ddd360bc623c2cfd0910229873438e4aba91650964a5852594c300a7067a126e0ab1678826381bfc9cc6fae1be7d2431e886348a2210717ca04dc32ef2ab44524846af55eeb88e99f225d1b5e2ae315082d6b69b7f362b6cb5de2771e5a49afdcf7a66b6f181d0ae67e7150bbc21b848f60a60a07f3bab8935de4c28d33fe757693c747797502f8297ec0d51347a38b4d3dc34dc1c81a400ba231f8c17e804adedd8bbb5e7aa1bdec1c8299f4b45f2df0420c494f39e176ca1b4bd603e4e595f4d1b59bbcb30df5ead3af8c64dae425282f648058ba503c2579675e21954a83319384d545d94792d3f3a7732909d0e13e374e73a8a12fefeb3682f93e777eaa10ac3f229d16e4206104bc471c51acddf50052e65a86b9228c7e77a2113cc0d123192cb1dccac7df4cb02a9a0f9b79342cf75bd7f22ecf708f5b731f4c191bf48a7757126f60a8dc9a157fb09141c53c18ffd85899044a445f478750818e7f3bddd28bb63e06ec6ea03607fe7b65fc49b019871a6ad1b66fcc475c8989e79ae1b6aeefadd0571e09c341a6326390fe9fdbde5829184cda658b5bf8c8e99b8829e7380fc5d6636a0853c6e3c92b899f8bbae9e183d3be462b447a724e700f0388501c8c4459a75d2ae6dbf8457c91df61e281a9cc002cfa494e829777c2c3c92a391e655971c7afa9b30efd60ffec42f05b401d07cbb4e61ee929a1b9113c41f9420efe14400f4171afab8a4bf2c526033da273c301d3ae2465ec09d937ca495a098bb11ac25461a5fd7d33f0d0a41c78374dabd1808b5cfcbae69d2d7c9d15d2cb21ad2339ccec1f21add0a7cfeec53f8d62c878ba8b7b25ef3f251ccdce67fa9f936f72d66c95ee9deee0c07693444fe8c15dbd4584c810b448e3a89a6d53541735163ee6d1892b3d9731e21c57303f729336b7ccb977c2cbb14a57e17e2f58be8c63ec3860f3a3521303551a6833be1c56c0d4aa7d9c208904680a4388696a30a15b8d05ac3f3e1052627f9052ac8200d8cb9f57f66f6afed13980168d2f076716f33e1fadbfc1e7eca58926537248ff4ea51119be33190f29d5dc8bf22d0b6ddd4461269d1d33a22c155d4f64968c5ba761df588ef926b8c54d7fbe9d78874f58e2601a722093c9ab6ca28f80a0e8518b44b081ad79956da1236d9960bb84b34d2cbc1fc2f88f7cb0d92a1d1a2356227b77c069c0f6de0d0ef9f981403206db3e3d44dde6ecd5e3476788c3993a3f00faa0f10c645c57ad893ec329b574fff8fc2ac4a8495f42d009470ad5986799b5399784a9e7ab920d224f7eaa224292947edb15d9053075ab5e1d0725cc9c32e57e36b43266b290ccaacde8817ee7a5ba0156441b26187c708aa215edd7020886c2de79f21d0e31bb56af0172c576a004a2575f2f5ebcdbb8bdf61578fabeeef3306f45d24df5eaa4d3a8840978fca39aff01a2ba511f397e74a8f5418f3dcbb8c667f72506dbc24f3c15e24387c538652e521bb415234c0ae5b1db58708fefe25ddd28a9eb7a8525479ded320ea0609d63b605d4fff7ccebba6e7c2e7fc7375ecacaf9799b6fe8c7a474bf4dc0d11924da13e0f064dc63d53a87b8ecc3ffe77f352b35b648323fbc3953d19e6bbda47168214b7c8f9eeefcf7d4ae255b157846e4a4a732cd6397fb65287a7c48cad7501bfd440030ad04cc18a8ba4f11cd9a0a2c245e1340e32bfe154c598734f95a7c1949e5fd74e8b1e4d14add5af708476022ffb99385824e224d9e687c8f879495b57b2ddc7f054b2105739cd43f6d5d7b6bbd4cf8164bd48b227f763c17a5ab71fea8b3a04b750d6c5fcb4500c65ee809bd7b3f51a8076d4e61f391397717913e4b79602d58cef75f8e063e8ddea8c1ba1c89b384bdf54297418710fb835539e56cc92942ae51dd9d04fc278cbb9ae615ec521ffe5a732f1655656cf02470695d13725afa0bb1435a84adbb42e41fdb983a4a2805d264c85c51f3475ca29b6530397ae03e45d1b6d8de2174e738380e2696126ae73760d1db473a039a3b8bb75ba1ac86c6026e21a0fe82889655c45788252ad6f643b37e5615530a50d02c82618e2fb87d35444d80c95ab0e1b44b761318d3b7fcd16b26852e0dd3e9c370a781405a212ba54b324ccb806bea87c47d16929fafc4031e4fe64b193c8bc0d0cf42960658ee706c152b6893ab3874459905d483a75f515bc4f2f29e6d52f8ccbe9f63bf3f7fbdf33a5e2ef5e3693597aa4b0ea4127e75c199d01cd52cb0ca186576ebe21cb254c7e5e31bac9f36c4b22f961146e81cc079aed7d31ca538f597c45d35893621f84868e1b471ac3f255bfff72624b24e0cf06f872fc520cce485efaf04edfe3e856846a0f7be600289395fab7c2dca0ee4f8bb2327934eae59cf4d28b7712ba3fe9b325e72b57380744221e6b284abd599fa99e19333f3b317d5c162b5959a07745a9f83a99af8a50900c6e82b4125e66ff321c597c01da97420f284baa5c086e05c98e0c0647999e946277f35ad97cf736c4985f9c16959a5c6e7eb9efb12668b2927a449d92976321902df7ab747c0d936e8fd179b46e18cc17af0b9abb60549e0ad593d6eb2970df23561b79c5cfbade8d0c1f65b715866f480331b5bf30ea1789b57fd5bd127c53d1ad252160fd5d6ae2c9930ba81fb926fe21544903a5c10da49080c511e737cef904c033b4f539bb3ffb82f0e41ac540e083dac6716894ba72ceed721616f8860b58d7801073edc6d7740abc05be6fd034e64a2268d767e908bd3bea3e4fe6d44bf55e842340e3b949955c6c87ae19b74f895efcca6f709cb04c8651a1eded520d4e3b16ede71f408a950b60368d2de69c489673096f24bf057547b0272b36a7f65ca090883e6daed1faf9cc27d4018d3c1f8758ba27ed20266206e666fa49c854ef3aa115256c94aa94e9d52d2293ebf381d1ba038e48ea7abcb702ecbdca625787ba7a57ea75168b34a1f295b0d81c2138b49caeba2aa832379aa5f8130163226d8e6a24cbd0c386080f5e467c438dce38abdb394fae90c73f2be12cf8b9b0c9d9b28788c0a86d6a8ebd3d89f852120e01826f3aeeb5f285a8876c400751e28f2d6a1b00b4197cee40adb7aaa7585963c62b474c6c1b3f3f26c81c6976b9c0dd8c4cff25e335f1a64b54088c1a0ad28d0ca47cd19aea29e5e359c8447f21ad1393c4ff397f6ee77f7c86a5fc06d661cd6ccdde99f2d888d29212e3b081e0595b73af251dd0183b66a923574a24a968541394927d2ebb3e200feef4e95b2bca9cc04742c16743c03b5f701ef6334a2ae49c54ffffaacb9ea4d9f7c8a420f0099ecab1f32c9d510803fefa04331a44ab8c3c7c1d4971d461886d1c3db043fc90a1863f128215198db1126170d999b5cf9ee183b326d40e1a28e082dd490e40f9253ad6d56dd2a2fa0c5f8ee5736ad0929a341f48754b03b4f609d31ed84496dbc05a70a1819f47e8dd32ffd49d6c6018465056266efc2a455fbf56d7d563c0a416e8f9f812fec9156c3a719a618daf22d7d3190e20c73f73687319a040e5dee19f6edad7e5e95529e3245fb38cef88db2b438c8062a0375867e788206de736488d5a6940f09db2b5a648e5d85a5f33e9584711d412da5b52e073097cfa937949dfa83b0857e792c8882aae518816c994f60e4595d111a24de481112ce5bedc2cdd34c3f07421699874549b7b2caf0296b7a6eb7414e863a6aa433cec9a3f4e0a606233dd103ab1e8b5192e198a632e80aefce0df1bd1eccd78716e01effd80a7a5991c25e64d7f8337934980c4074e2028c6b407979bab0c24f8f5e56a4bcf39c70202918dfc8f24bfd74fb4773609fb201349070b2ff241c8fda3a4aa1193044f2bf6dd7aac3ec411ab02d4196464b87f5b292c0db8cbf511e9d8eaefcde211a5ddaeb0b364f3045fd50031b97186fa9218a43a63953b3d0656d7baadf42338c59635061270d029efa4f703d80b72ca618c94359e93c62f51a4e291222604493466d254c5fbcd7f6f980511a338941cad7b36422f0151dae5fee28cace2a319cb6cceb698a3476b9e4c609a3303a3ef258d1b58eeed24d540b6b4bd447c7b695abe7584e96cdd65fa11a7c993bef01d16070cb619ac4540d0dfe969c726f6785e0239f43cf8735978c1ebe8c000b029600bc0cfa105f7f2f0980f3370ffd3dafec29d227fceae567ab485e697b6af5d4238e88db920d375fc03152e983f92339f9cc19d17ead588cf317e5ffba94c69a814e4a2b55a2d0221a6fa2daf913a06f21da6084c7c809274b676ce84dec83baf011234d76405c74305eb59b3516fb3cfbdeaeab6ce37f4fbb9f0a5d297e4a1da3be5faa2d63803245798aab6c994095f6d7f987c7c758928eaddd0b3260d587ed5de4d145d414b19233064e8007f468d0ac590c5e41a8359f00ff332ac03d33b9ac8d4b7c38f3581baa0c7f8f4d186aa6a5f08c5af0dc0618173c50b932f8ba7c7fc6c90d6c9c6935d7703e5a59716dfc3d23ee1bd1063ada006e672af4d8fe87e53e2e55b5ff8d090ce8fdf363bfea792d41f865afb34de0a23a6bb4f64c8f05baa5af7c9961d5cc314e33d536ddcd0363bb1243261865207011086aa197217ea02b690ca81aa216aaf1bba98a34ea87eb4e5e076c3d9c4ee19328a3680aafbc4a1fd84f719b03457a7cf5692ec7c303eb76647110b2fe54828ce8cd3ac450bcc3b59255f893d7b1222e2a1b8a586119340ad55936246d44acfc102c2522fb73e86e5ba9aadd0839b2f736f5e889ce9cd00bd399f391a87bb46ad8e8cb91f2a80aa657398f2b9969bbfe19c4e3cc2426130e2d82bba85c7bd3fa45c46a75b1d32646e9b4ba2b8163b0494b178995987591c4d03c43c9015cdf73d4d6847f8d73c896f6e2e1fa0d81b7a96384e3cd780f6616c7197932f7abaf401d276a5f054bb7ceeef6bd0419eb7e950b2ea8b1e3eaf29b6625df57435ca1c415c91c57cc60c46d052fa46875d99df5ecf0dd5e640177f0b5a3aba54d1584a957af70691807a2f3d7fa4bffb</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">Here&#39;s something encrypted, password is required to continue reading.</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Hello world!</title>
    <link href="https://shuoandy.github.io/2023/05/01/hello-world/"/>
    <id>https://shuoandy.github.io/2023/05/01/hello-world/</id>
    <published>2023-05-01T13:58:09.594Z</published>
    <updated>2023-04-02T08:39:54.543Z</updated>
    
    <content type="html"><![CDATA[<p>这里是博主闲的没事搭的一个无脑博客！（说是搭建，其实就是直接用butterfly主题…）为此，博主斥九块巨资买了这个域名的一年使用权…美化和功能还在持续更新！</p><p>搭建博客的过程中意识到这个东西真的是小学生都会…纯敲代码真的能赚到钱吗？博主对此表示大大的怀疑…总之，说不定以后博主会不定期地发一些面向小白编程、数学和概率论问题（虽然博主的概率论学的一坨屎…）的帖子，敬请期待！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里是博主闲的没事搭的一个无脑博客！（说是搭建，其实就是直接用butterfly主题…）为此，博主斥九块巨资买了这个域名的一年使用权…美化和功能还在持续更新！&lt;/p&gt;
&lt;p&gt;搭建博客的过程中意识到这个东西真的是小学生都会…纯敲代码真的能赚到钱吗？博主对此表示大大的怀疑…总之</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>dsa个人题库</title>
    <link href="https://shuoandy.github.io/2023/05/01/dsa/"/>
    <id>https://shuoandy.github.io/2023/05/01/dsa/</id>
    <published>2023-05-01T13:58:09.593Z</published>
    <updated>2023-06-10T09:55:01.468Z</updated>
    
    <content type="html"><![CDATA[<p>本文是作者在复习数据结构刷题的时候遇到的简单但不完全简单的小题（大题的话博主已经弃疗了…要杀要刮随邓公了）。dsa知识点相当的多，随便举一些例子吧：主定理、动态规划、向量列表、先序遍历的递归&#x2F;迭代版、AVL树和红黑树、散列冲突、dijkstra、堆合并、KMP算法、各种各样的排序（以及它们的性质和改进）…</p><p>其实重点就是红黑树这些复杂结构的理解，只要这些知识学会了就行。反正难题不会，会题不难，不是吗？</p><p>总之，这些题目是巩固理解、记牢算法的好选择，而难度较大的证明大题则超出了博主的理解范围…假若将来博主需要复习dsa，或者真的有学弟学妹会看到这篇题库，那么希望这些题目能对将来的我&#x2F;别人有一丁点帮助…</p><br><h3 id="对于二分查找版本C，当查找区间的长度缩小为0时，V-lo-是："><a href="#对于二分查找版本C，当查找区间的长度缩小为0时，V-lo-是：" class="headerlink" title="对于二分查找版本C，当查找区间的长度缩小为0时，V[lo]是："></a>对于二分查找版本C，当查找区间的长度缩小为0时，V[lo]是：</h3><p>min{0 &lt; r &lt; n &amp; e &lt; V[r]}。因为<strong>事实上命中的秩是lo-1</strong>，而lo-1右边的（也就是从lo开始的左闭右开区间）都是严格大于e的元素。故而V[lo]是大于e的，而v[lo-1]不大于e。顺便一提，课本中的向量中的lo和hi永远是左闭右开区间，即[lo，hi）。</p><br><h3 id="在有序向量V中插入元素e并使之保持有序，下列代码正确的是"><a href="#在有序向量V中插入元素e并使之保持有序，下列代码正确的是" class="headerlink" title="在有序向量V中插入元素e并使之保持有序，下列代码正确的是:"></a>在有序向量V中插入元素e并使之保持有序，下列代码正确的是:</h3><p>V.insert( V.Search(e)+1 , e )。V.Search(e)应当+1，否则会将最后一个元素挤掉。</p><br><h3 id="【这道题似乎是oop的题，可以无视它】是否可以将视频里向量扩容代码中的："><a href="#【这道题似乎是oop的题，可以无视它】是否可以将视频里向量扩容代码中的：" class="headerlink" title="【这道题似乎是oop的题，可以无视它】是否可以将视频里向量扩容代码中的："></a>【这道题似乎是oop的题，可以无视它】是否可以将视频里向量扩容代码中的：</h3><p><code>for (int i = 0; i &lt; _size; i++) _elem[i] = oldElem[i];</code></p><p>替代为：</p><p><code>memcpy(_elem, oldElem, _size * sizeof(T));</code></p><p>不可以，与T的数据类型有关。简单地说，假如T不是基本数据类型例如string或一个类，那么&#x3D;号或许是重载过的，<strong>前者相当于深拷贝；而memcpy是浅拷贝</strong> （假如你去查memcpy的源代码的话会发现它就是在逐字节地复制hhhh），析构的时候可能会报错！</p><h3 id="以递归的方式计算fib-n-的时间复杂度是Θ-2-n-？"><a href="#以递归的方式计算fib-n-的时间复杂度是Θ-2-n-？" class="headerlink" title="以递归的方式计算fib(n)的时间复杂度是Θ(2^n)？"></a>以递归的方式计算fib(n)的时间复杂度是Θ(2^n)？</h3><p>错，实际上时间复杂度是Θ(1.618^n)，故而只能说是O(2^n)而非θ(2^n)。</p><br><h3 id="在向量V-x3D-2-3-5-7-11-13-17-19-23-中用插值查找搜索元素7，猜测的轴点mi为："><a href="#在向量V-x3D-2-3-5-7-11-13-17-19-23-中用插值查找搜索元素7，猜测的轴点mi为：" class="headerlink" title="在向量V&#x3D;{2, 3, 5, 7, 11, 13, 17, 19, 23}中用插值查找搜索元素7，猜测的轴点mi为："></a>在向量V&#x3D;{2, 3, 5, 7, 11, 13, 17, 19, 23}中用插值查找搜索元素7，猜测的轴点mi为：</h3><p>答案为1。 <strong>mi&#x3D;lo+(hi-lo)*(e-V[lo])&#x2F;(V[hi]-V[lo])</strong></p><br><h3 id="长度为n的列表，被等分为n-x2F-k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为："><a href="#长度为n的列表，被等分为n-x2F-k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为：" class="headerlink" title="长度为n的列表，被等分为n&#x2F;k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为："></a>长度为n的列表，被等分为n&#x2F;k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为：</h3><p>O(n*k)。插入排序的时间复杂度&#x3D;O(n+I)，其中I为逆序对（不是相邻逆序对）的数量。本题中最多有 n &#x2F; k * k^2&#x3D; n * k个逆序对。</p><p>顺便一提，<strong>逆序对与插入排序相关，而循环节与选择排序相关</strong>（循环节的数量决定了选择排序中“无效交换”的次数，期望为θ(log n) ）。</p><br><h3 id="（在中缀表达式求值中）什么时候进行实际的运算？"><a href="#（在中缀表达式求值中）什么时候进行实际的运算？" class="headerlink" title="（在中缀表达式求值中）什么时候进行实际的运算？"></a>（在中缀表达式求值中）什么时候进行实际的运算？</h3><p>当前的操作符比栈顶的操作符优先级低时，即栈顶运算符优先级高时。因为每次运算都是对于栈顶运算符的运算。</p><br><h3 id="在一棵树中-顶点p是顶点v的父亲-则它们的高度的关系是否为height-v-x3D-height-p-1？"><a href="#在一棵树中-顶点p是顶点v的父亲-则它们的高度的关系是否为height-v-x3D-height-p-1？" class="headerlink" title="在一棵树中,顶点p是顶点v的父亲,则它们的高度的关系是否为height(v)&#x3D;height(p)-1？"></a>在一棵树中,顶点p是顶点v的父亲,则它们的高度的关系是否为height(v)&#x3D;height(p)-1？</h3><p>不一定，比如p的左孩子是v，右孩子有一棵很大的子树，此时height(v)&#x3D;0而height(p)&#x3D;k。故而只能说height(v)&lt;height(p)。</p><br><h3 id="对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为"><a href="#对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为" class="headerlink" title="对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为:"></a>对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为:</h3><p><img src="/2023/05/01/dsa/1.jpg"></p><p>只有f。</p><p>事实上，“沿藤爬取”算法会先访问该节点，再将该节点的右孩子推入栈，并顺左侧藤下行。主算法会试图对每次调用“沿藤爬取”算法，并在无法继续爬取后将栈顶pop掉，再次对该元素进行爬取。</p><p>故而首先对a爬取，访问a，将c压栈，再访问b。此时“沿藤爬取”算法结束，将c pop掉并沿c爬取，访问c，将f压栈，再访问d，再将e压栈。故而刚访问完d的时候栈中只有c的右孩子f。</p><br><h3 id="对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为"><a href="#对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为" class="headerlink" title="对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为:"></a>对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为:</h3><p><img src="/2023/05/01/dsa/6a847e3de9105b2fa947e777fad2235.jpg"></p><p>d和f。</p><p>中序遍历时，“沿藤爬取”算法会将每个节点入栈，直到爬完为止。回到主算法，算法会pop掉栈顶元素并访问它，同时试图进入它的右孩子。若有右孩子，则以右孩子为根实施“沿藤爬取”算法，若没有右孩子，则会再pop掉栈顶元素，以此为根实施“沿藤爬取”算法。</p><p>故而首先对b爬取，b入栈，a入栈，访问a，访问b，并且转向其右孩子f，对f进行爬取会将f，d，c入栈，访问c。</p><br><h3 id="对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为"><a href="#对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为" class="headerlink" title="对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为:"></a>对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为:</h3><p><img src="/2023/05/01/dsa/4575cfc47ab97c73e4b59c1401d8064.jpg"></p><p>f和g。</p><p>请注意，层次遍历使用的辅助数据结构不是栈，而是队列。也没有藤算法，只有一个主算法。主算法会将根入队，并且每次循环将队首出队并访问，并将其左孩子入队、右孩子入队。</p><p>访问A，将B入队。访问B，将C和D依次入队…本算法比先序中序容易很多。</p><br><h3 id="从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O-n-？"><a href="#从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O-n-？" class="headerlink" title="从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O(n)？"></a>从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O(n)？</h3><p>正确，因为极端退化的二叉树就是链表（即所有节点都只有一个孩子），BST也是一样的。</p><br><h3 id="AVL树插入节点最多会使多少节点失衡？删除节点呢？"><a href="#AVL树插入节点最多会使多少节点失衡？删除节点呢？" class="headerlink" title="AVL树插入节点最多会使多少节点失衡？删除节点呢？"></a>AVL树插入节点最多会使多少节点失衡？删除节点呢？</h3><p>O(log n)和O(1)。<strong>事实上，删除节点至多只会令一个节点失衡</strong></p><p>值得一提的是，插入节点后失衡的节点最低为其祖父（爷爷），而删除节点后失衡的节点最低可以是其父亲。但在调整时，插入导致的失衡只需一次单旋&#x2F;双旋即可，而删除导致的失衡却可能需要至多O(log n)次单旋&#x2F;双旋。</p><br><h3 id="AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g-p-v的子树高度？"><a href="#AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g-p-v的子树高度？" class="headerlink" title="AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g,p,v的子树高度？"></a>AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g,p,v的子树高度？</h3><p>有可能不变也有可能减小1。请注意这里的子树高度是相比于原AVL树而言，即删除操作之前的树。如果子树高度不变，那么全树复衡；高度减1，则需要向上继续旋转。</p><p>顺便一说，插入节点后旋转，其子树高度一定不变，这也对应了上一个问题中所说的，插入后只需一次单旋&#x2F;双旋。</p><br><h3 id="伸展树采用双层伸展策略，即可避免最坏情况的发生？"><a href="#伸展树采用双层伸展策略，即可避免最坏情况的发生？" class="headerlink" title="伸展树采用双层伸展策略，即可避免最坏情况的发生？"></a>伸展树采用双层伸展策略，即可避免最坏情况的发生？</h3><p>错误。【这道题有点文字游戏…】只能减小最坏情况的频率，也就是最坏情况不致持续发生，但仍可能极少地发生。</p><br><h3 id="如果说访问一次内存需要1秒，则一次外存访问大概需要："><a href="#如果说访问一次内存需要1秒，则一次外存访问大概需要：" class="headerlink" title="如果说访问一次内存需要1秒，则一次外存访问大概需要："></a>如果说访问一次内存需要1秒，则一次外存访问大概需要：</h3><p>一天。访问内存需要100 ns，而磁盘访问需要10^7 ns。两者相差10^5倍。</p><br><h3 id="教材P-802的重散列（rehash）一定是扩容操作吗？"><a href="#教材P-802的重散列（rehash）一定是扩容操作吗？" class="headerlink" title="教材P 802的重散列（rehash）一定是扩容操作吗？"></a>教材P 802的重散列（rehash）一定是扩容操作吗？</h3><p>不一定。如果懒惰删除的标记太多，那么4 N（其中N是当前真实的非空桶，不包括懒惰删除标记）不一定比当前散列表的长度大，此时的重散列反而是缩容操作。这也是为什么我们不用2 M（M是散列表长度）而用4 N的原因。</p><br><h3 id="红黑树在每次插入-x2F-删除操作后，拓扑结构的变化不超过O-1-。"><a href="#红黑树在每次插入-x2F-删除操作后，拓扑结构的变化不超过O-1-。" class="headerlink" title="红黑树在每次插入&#x2F;删除操作后，拓扑结构的变化不超过O(1)。"></a>红黑树在每次插入&#x2F;删除操作后，拓扑结构的变化不超过O(1)。</h3><p>正确。事实上，这是红黑树非常重要的性质之一。而AVL树虽然插入操作满足题意，但正如14题所说，删除操作可能会有O(log n)级别的拓扑改变。</p><br><h3 id="当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为："><a href="#当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为：" class="headerlink" title="当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为："></a>当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为：</h3><p>没有变化。RR1（叔父为黑）会改变O(1)的拓扑结构，但会立刻终止修正；而RR2（叔父为红）不会改变任何拓扑结构（而仅仅是将颜色重染），但可能会向上传递双红缺陷。</p><p>另一方面，对于删除操作，对于叔父节点、叔父节点的孩子、祖父的颜色共有四种情况，其中BB-1、BB-2R都是一蹴而就的，BB-3是两蹴而就的，只有BB-2B（叔父节点为黑、叔父节点的孩子均为黑、祖父为黑）的情况可能向上传递双黑缺陷；但只有BB-1和BB-3会改变拓扑结构，故而跟如20题所说，红黑树的插入、删除操作都不会使拓扑结构改变较大。</p><br><h3 id="伸展树单次查找操作的最坏时间复杂度比AVL树大。"><a href="#伸展树单次查找操作的最坏时间复杂度比AVL树大。" class="headerlink" title="伸展树单次查找操作的最坏时间复杂度比AVL树大。"></a>伸展树单次查找操作的最坏时间复杂度比AVL树大。</h3><p>正确。在单链伸展树中插入叶子元素，需要一直向上双层伸展（事实上双层伸展也是“逐层”伸展，只是顺序略有不同），此时复杂度为O(n)。</p><p>值得一提的是，在分摊分析的时候，我们为了避免这样的情况，将分摊时间记为A，其等于实际时间T与势能差delta的和。其中势能可以理解为“银行”，简单操作省下来的时间会“积德行善”地存入一些多余的时间，在遇到最坏情况时我们再将这些“存款”取出，用于弥补不足。如是便能均衡地“劫富济贫”，完成分析。每一步的A之和不大于每一步的T之和，而每一步的A均不超过log n（当T为θ(n)时，势能函数会为一个θ(n)级别的负数）。具体过程请见邓公编写的习题解析8-2。</p><br><h3 id="对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为："><a href="#对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为：" class="headerlink" title="对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为："></a>对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为：</h3><p>O(n)。假如我们粗略地估计时间复杂度，大概率得出的结论是O(m*n)…然而假如我们记录一个观察值k&#x3D;2 i - j，那么我们会发现无论是失败匹配还是成功匹配，其都会使得观察值k严格递增（至少加1），于是迭代过程至多不会超过2 n次，即时间复杂度为O(n)。（说是O(m+n)也行）</p><br><h3 id="有2015个节点的左式堆，左子堆的规模最小为？"><a href="#有2015个节点的左式堆，左子堆的规模最小为？" class="headerlink" title="有2015个节点的左式堆，左子堆的规模最小为？"></a>有2015个节点的左式堆，左子堆的规模最小为？</h3><p>1。事实上正如教材所说，左式堆的左子堆未必要比右子堆“大”很多，左子堆的规模和高度都不一定大于其兄弟，甚至可以夸张到本题的程度。本题的例子是根的左子堆只有一个节点，右子堆根节点只有左孩子，其左孩子亦只有左孩子…即每个节点的右侧链都只有其本身，这样每个节点的npl均等于其右侧链长度1。</p><br><h3 id="与MAD相比，除余法的缺陷在于："><a href="#与MAD相比，除余法的缺陷在于：" class="headerlink" title="与MAD相比，除余法的缺陷在于："></a>与MAD相比，除余法的缺陷在于：</h3><p>不动点和高阶均匀性（相关性）。不动点是指hash(0)&#x3D;0；高阶均匀性指相邻的关键码的地址一定相邻。而multipy-add-divide方法便不会有这些问题。</p><br><h3 id="将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。"><a href="#将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。" class="headerlink" title="将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。"></a>将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。</h3><p>错误。比如1，2，3，4，6，5，7【5和6是乱序的！】，由于在7插入的时候会重新将splay tree变成单链，故诸如此类的操作仍然会形成单链。</p><br><h3 id="linearselect最坏复杂度为？"><a href="#linearselect最坏复杂度为？" class="headerlink" title="linearselect最坏复杂度为？"></a>linearselect最坏复杂度为？</h3><p>O(n)。事实上，见教材 P 1274，我们取一堆小子序列中位数的中位数，以此作为轴点来解决轴点选取过差的问题。（此时轴点至少能排除n&#x2F;4长度的差区间）我们得出如下公式：T(n)&#x3D; c n+ T(n&#x2F;Q) + T(3&#x2F;(4 n))。</p><br><h3 id="图的广度优先搜索访问各顶点的模式类似于二叉树的："><a href="#图的广度优先搜索访问各顶点的模式类似于二叉树的：" class="headerlink" title="图的广度优先搜索访问各顶点的模式类似于二叉树的："></a>图的广度优先搜索访问各顶点的模式类似于二叉树的：</h3><p>层次遍历。顺便一说，深度优先搜索类似于先序遍历。</p><br><h3 id="多叉堆比二叉堆的操作复杂度更高？"><a href="#多叉堆比二叉堆的操作复杂度更高？" class="headerlink" title="多叉堆比二叉堆的操作复杂度更高？"></a>多叉堆比二叉堆的操作复杂度更高？</h3><p>错误。事实上，上滤成本会降低，而（由于至多需要比对d个孩子）下滤成本会升高。另一方面，d最好是2的次幂，否则不能直接借助移位操作来加快秩的计算。</p><br><h3 id="在理想随机下，quickselect（k-select）的复杂度及其证明？"><a href="#在理想随机下，quickselect（k-select）的复杂度及其证明？" class="headerlink" title="在理想随机下，quickselect（k-select）的复杂度及其证明？"></a>在理想随机下，quickselect（k-select）的复杂度及其证明？</h3><p>O(n)。我们记T(n)为期望比较次数，T(n) &lt;&#x3D; (n-1) + (2&#x2F;n)*( T(2&#x2F;n) + T(1+2&#x2F;n) + … + T(n-1) )，在此我们<strong>大胆猜测</strong>T(n)&lt; 4 n，归纳证明该结论是正确的。【“大胆猜想”，看来邓公数竞学的不错】</p><br><h3 id="下图是一个三叉树实现的trie树，请写出其中储存的所有单词："><a href="#下图是一个三叉树实现的trie树，请写出其中储存的所有单词：" class="headerlink" title="下图是一个三叉树实现的trie树，请写出其中储存的所有单词："></a>下图是一个三叉树实现的trie树，请写出其中储存的所有单词：</h3><p><img src="/2023/05/01/dsa/593ec60e90487b413ecea3ed74aa70e.png"></p><p>（顺序无关）how many roads must a man walk down. </p><p>三叉trie树的左右孩子都是“另开炉灶”的，只有中孩子继承了父亲的字母，比如中间的must，u是m的中孩子，s是u的中孩子，t是u的中孩子，故而有must。而d是m的左孩子，故而d没有继承m，该单词为down而非mdown。</p><br><h3 id="在散列表中，一个好的散列函数h需要是单射？"><a href="#在散列表中，一个好的散列函数h需要是单射？" class="headerlink" title="在散列表中，一个好的散列函数h需要是单射？"></a>在散列表中，一个好的散列函数h需要是单射？</h3><p>错误。事实上不可能是单射，因为可用地址空间比所有词条的空间要小，所以一定会有多个词条映射到同一个地址。</p><br><h3 id="若某算法的时间复杂度递归式可写为T-n-x3D-2020-T-n-1-x2F-2020-O-log-n-，求其渐进复杂度。"><a href="#若某算法的时间复杂度递归式可写为T-n-x3D-2020-T-n-1-x2F-2020-O-log-n-，求其渐进复杂度。" class="headerlink" title="若某算法的时间复杂度递归式可写为T(n)&#x3D;2020 * T(n^(1&#x2F;2020)) + O(log n)，求其渐进复杂度。"></a>若某算法的时间复杂度递归式可写为T(n)&#x3D;2020 * T(n^(1&#x2F;2020)) + O(log n)，求其渐进复杂度。</h3><p>log n* log log n。本题的递归式不是主定理传统的T(n&#x2F;b)，故而看起来我们对其无可奈何；但假如我们设m &#x3D; log n，那么原式变成T(n) &#x3D;R(m) &#x3D; 2020 * R(m&#x2F;2020) + O(m)，故而得出结论。【这道题好像是OI的题吧？实在有点奇技淫巧】</p><br><h3 id="请证明，如果表长为4k-3的素数，那么双向平方试探的确可以遍历所有地址空间。"><a href="#请证明，如果表长为4k-3的素数，那么双向平方试探的确可以遍历所有地址空间。" class="headerlink" title="请证明，如果表长为4k+3的素数，那么双向平方试探的确可以遍历所有地址空间。"></a>请证明，如果表长为4k+3的素数，那么双向平方试探的确可以遍历所有地址空间。</h3><p>首先，我们需要引入费马双平方引理及其推论，即一个自然数是两个整数的平方和当且仅当其4k+3形式的素因子的次数为偶数。如45&#x3D;5*3^2，其等于9+36。</p><p>我们首先易得，正向试探中0 – 2k+1的模是互异的，而2k+2 – 4k+3与其完全对称。简单来说，n^2-m^2能被该素数整除当且仅当n+m等于该素数。</p><p>然后我们证明，反向试探中0 – 2k+1（同上，是互异的）与正向试探除了0之外，模都是互异的。否则，n^2+m^2可以被该素数整除，但由费马双平方引理知其只能整除该素数的平方、四次方…而这显然是不可能的，因为n^2+m^2小于该素数平方。</p><p>由此证毕，正向试探共有2k+2个（算上0），而反向试探共有2k+1个。</p><br><h3 id="基于比较的排序算法，对于任何输入序列都需要至少Ω-n-log-n-时间。"><a href="#基于比较的排序算法，对于任何输入序列都需要至少Ω-n-log-n-时间。" class="headerlink" title="基于比较的排序算法，对于任何输入序列都需要至少Ω(n log n)时间。"></a>基于比较的排序算法，对于任何输入序列都需要至少Ω(n log n)时间。</h3><p>错误。插入排序是输入敏感的，其最好情况只需O(n)时间。</p><br><h3 id="在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。"><a href="#在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。" class="headerlink" title="在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。"></a>在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。</h3><p>正确。这是一个蛮有意思的小结论。</p><br><h3 id="基于二分查询A版本改进的fib查找，对于长度为n-x3D-fib-k-1的向量，最坏查找长度为？"><a href="#基于二分查询A版本改进的fib查找，对于长度为n-x3D-fib-k-1的向量，最坏查找长度为？" class="headerlink" title="基于二分查询A版本改进的fib查找，对于长度为n&#x3D;fib(k)-1的向量，最坏查找长度为？"></a>基于二分查询A版本改进的fib查找，对于长度为n&#x3D;fib(k)-1的向量，最坏查找长度为？</h3><p>k-1。可以用归纳证明：由于fib(k)-1左右区间分别为fib(k-1)-1和fib(k-2)-1，向左的最坏长度为k-2+1，向右的最坏长度为k-3+2，均为k-1。本题也体现了最坏情况下fib查找的均衡性。</p><br><h3 id="具有2020个内部节点的红黑树的最大黑高度是？"><a href="#具有2020个内部节点的红黑树的最大黑高度是？" class="headerlink" title="具有2020个内部节点的红黑树的最大黑高度是？"></a>具有2020个内部节点的红黑树的最大黑高度是？</h3><p>10。黑高度&#x3D;其等价B树的高度。另一方面，最大高度有些困难，我们试图让一个红黑树的高度等于其黑高度的二倍，并且用尽可能少的节点，故而我们只用h&#x2F;2个红色节点即可。后续计算相对麻烦，详见习题解析8-13。</p><br><h3 id="请证明：高度为h的AVL树，其叶子节点的深度不会小于h-x2F-2向上取整。"><a href="#请证明：高度为h的AVL树，其叶子节点的深度不会小于h-x2F-2向上取整。" class="headerlink" title="请证明：高度为h的AVL树，其叶子节点的深度不会小于h&#x2F;2向上取整。"></a>请证明：高度为h的AVL树，其叶子节点的深度不会小于h&#x2F;2向上取整。</h3><p><strong>对h做归纳</strong>（h&#x3D;1时显然）。假设以上命题对高度小于h的AVL 树均成立，以下考查高度为h的AVL树：</p><p>由于左、右子树的高度至多为h - 1，至少为h - 2，由归纳假设，高度h-1的叶子节点到该子树根的深度至少为(h-1)&#x2F;2向上取整，大于等于h&#x2F;2向上取整 -1；高度h-1的叶子节点到该子树根的深度至少为h&#x2F;2向上取整 -1。故而无论是h-1还是h-2，其叶子到总根节点的深度均不小于h&#x2F;2向上取整 -1 +1。证毕。</p><p><strong>本题体现了归纳法在树状结构（顺便一说，二分查找这类的证明题也可视作类树）中的出色发挥</strong></p><br><h3 id="若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P-1258的majCandidate算法是否还正确？"><a href="#若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P-1258的majCandidate算法是否还正确？" class="headerlink" title="若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P 1258的majCandidate算法是否还正确？"></a>若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P 1258的majCandidate算法是否还正确？</h3><p>错误。虽然对于向量长度为奇数时，修改的定义显然与原定义没有区别，但对于向量长度为偶数时，我们很容易便能举出反例：0, 0, 0, 0, 1, 1, 1, 1, 2, 1。其中1是我修改定义后的众数，但算法会认为2是众数的候选者。本例中我们也能看到，算法选取的众数候选者甚至有可能是一个仅出现过一次的龙套元素。</p><br><h3 id="若T-n-x3D-O-n-2-，F-n-x3D-O-n-，则T-n-x2F-F-n-x3D-O-n-2-。"><a href="#若T-n-x3D-O-n-2-，F-n-x3D-O-n-，则T-n-x2F-F-n-x3D-O-n-2-。" class="headerlink" title="若T(n)&#x3D;O(n^2)，F(n)&#x3D;O(n)，则T(n)&#x2F;F(n)&#x3D;O(n^2)。"></a>若T(n)&#x3D;O(n^2)，F(n)&#x3D;O(n)，则T(n)&#x2F;F(n)&#x3D;O(n^2)。</h3><p>错误。事实上复杂度函数可以小于常数如F(n)&#x3D;θ(1&#x2F;n)，对于本课程而言请注意这种可能性的存在。【虽然但是，小于常数有什么意义？反正背就完了】</p><br><h3 id="在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶-x2F-当前运算符组合。"><a href="#在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶-x2F-当前运算符组合。" class="headerlink" title="在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶&#x2F;当前运算符组合。"></a>在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶&#x2F;当前运算符组合。</h3><p>“(“与”\0”、”)”与所有运算符、”\0”与”)”、”!”与”(“（其中第一个为栈顶运算符，第二个为当前运算符）。即左括号不可能留到最后而不遇到右括号；右括号不可能进入运算符栈；！是单目运算符，不可能直接与左括号相邻。</p><br><h3 id="为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？"><a href="#为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？" class="headerlink" title="为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？"></a>为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？</h3><p>不相同，后者是前者的二倍。与简单的上滤不同，<strong>每一步下滤需要和左右孩子都比较一番</strong>，而锦标赛树只需比较一次即可。</p><br><h3 id="规模为n的任何两棵等价二叉搜索树，至多经过2n-2-次旋转调整，即可彼此转换。"><a href="#规模为n的任何两棵等价二叉搜索树，至多经过2n-2-次旋转调整，即可彼此转换。" class="headerlink" title="规模为n的任何两棵等价二叉搜索树，至多经过2n - 2 次旋转调整，即可彼此转换。"></a>规模为n的任何两棵等价二叉搜索树，至多经过2n - 2 次旋转调整，即可彼此转换。</h3><p>正确。见习题解析7-15，将任意一棵”最左侧通路“长为s的（博主个人认为这东西几乎就是相对于npl右侧链的左侧链）二叉搜索树转换为一个左倾单链需要n-1-s步旋转。故而可知我们可以将树A先转为单链，再将单链反向转为树B，至多不会超过2n-2次旋转。</p><br><h3 id="对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。"><a href="#对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。" class="headerlink" title="对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。"></a>对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。</h3><p>正确。对于优先级表中除了左右括号和结束符&#x2F;0之外的操作符，当栈顶和当前运算符均为此操作符时，优先级均为栈顶&gt;当前，故而在不存在括号的情况下，操作符栈不可能堆叠大量运算符；在堆叠了各种不同的操作符后一定会执行运算并开始清除栈中元素。</p><br><h3 id="带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。"><a href="#带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。" class="headerlink" title="带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。"></a>带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。</h3><p>正确。对于Huffman算法，若有出现频率相同的字符（或是在合并过程中存在出现频率相同的子树），则会有歧义的发生，这样的歧义虽不会导致Huffman树的最优性，却会导致不同结构的情况，这就是所谓Huffman树的不唯一性（另两个性质是内部节点的双子性和层次性）。至于题中所说的情况，abcd的出现频率分别是2211，这个简单的例子就可以构造出两棵高度不同的Huffman树。</p><br><h3 id="考后感想"><a href="#考后感想" class="headerlink" title="考后感想"></a>考后感想</h3><p>妈的，设计大题让设计一个括号匹配的数据结构。不会做，二十分白给，寄。</p><p><strong>印象很深的两道题目是“指出教材中【为了易于理解而牺牲效率】的两个算法”和设计答题“请设计一个有插入功能的左右括号匹配判别器”（具体需求复杂度忘了，据说是用二叉树+lazy标记解决）。这两道题博主没有做出来…</strong></p><p>可能是因为判断题和简答题做的还不错（不过简答题第一题就不会，问的是教材中有些算法为了精简代码而牺牲了效率，根本没记）最后还是拿A-了，邓公太善良了T T</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是作者在复习数据结构刷题的时候遇到的简单但不完全简单的小题（大题的话博主已经弃疗了…要杀要刮随邓公了）。dsa知识点相当的多，随便举一些例子吧：主定理、动态规划、向量列表、先序遍历的递归&amp;#x2F;迭代版、AVL树和红黑树、散列冲突、dijkstra、堆合并、KMP算法</summary>
      
    
    
    
    <category term="C++" scheme="https://shuoandy.github.io/categories/C/"/>
    
    
    <category term="C++" scheme="https://shuoandy.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史9--思思【2】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS9/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS9/</id>
    <published>2023-05-01T13:58:09.592Z</published>
    <updated>2023-04-03T01:57:20.196Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS9/01.jpg"><br><img src="/2023/05/01/DLS9/02.jpg"><br><img src="/2023/05/01/DLS9/03.jpg"><br><img src="/2023/05/01/DLS9/04.jpg"><br><img src="/2023/05/01/DLS9/05.jpg"><br><img src="/2023/05/01/DLS9/06.jpg"><br><img src="/2023/05/01/DLS9/07.jpg"><br><img src="/2023/05/01/DLS9/08.jpg"><br><img src="/2023/05/01/DLS9/09.jpg"><br><img src="/2023/05/01/DLS9/10.jpg"><br><img src="/2023/05/01/DLS9/11.jpg"><br><img src="/2023/05/01/DLS9/12.jpg"></p><p><img src="/2023/05/01/DLS9/13.jpg"></p><p><img src="/2023/05/01/DLS9/14.jpg"></p><p><img src="/2023/05/01/DLS9/15.jpg"></p><p><img src="/2023/05/01/DLS9/16.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS9/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS9/02.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS9/03.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/0</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史8--小张【5】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS8/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS8/</id>
    <published>2023-05-01T13:58:09.590Z</published>
    <updated>2023-04-02T13:08:32.584Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS8/01.jpg"><br><img src="/2023/05/01/DLS8/02.jpg"><br><img src="/2023/05/01/DLS8/03.jpg"><br><img src="/2023/05/01/DLS8/04.jpg"><br><img src="/2023/05/01/DLS8/05.jpg"><br><img src="/2023/05/01/DLS8/06.jpg"><br><img src="/2023/05/01/DLS8/07.jpg"><br><img src="/2023/05/01/DLS8/08.jpg"><br><img src="/2023/05/01/DLS8/09.jpg"><br><img src="/2023/05/01/DLS8/10.jpg"><br><img src="/2023/05/01/DLS8/11.jpg"><br><img src="/2023/05/01/DLS8/12.jpg"></p><p><img src="/2023/05/01/DLS8/13.jpg"></p><p><img src="/2023/05/01/DLS8/14.jpg"></p><p><img src="/2023/05/01/DLS8/15.jpg"></p><p><img src="/2023/05/01/DLS8/16.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS8/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS8/02.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS8/03.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/0</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史7--龙套A【2】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS7/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS7/</id>
    <published>2023-05-01T13:58:09.589Z</published>
    <updated>2023-04-02T13:08:23.992Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS7/01.jpg"><br><img src="/2023/05/01/DLS7/02.jpg"><br><img src="/2023/05/01/DLS7/03.jpg"><br><img src="/2023/05/01/DLS7/04.jpg"><br><img src="/2023/05/01/DLS7/05.jpg"><br><img src="/2023/05/01/DLS7/06.jpg"><br><img src="/2023/05/01/DLS7/07.jpg"><br><img src="/2023/05/01/DLS7/08.jpg"><br><img src="/2023/05/01/DLS7/09.jpg"><br><img src="/2023/05/01/DLS7/10.jpg"><br><img src="/2023/05/01/DLS7/11.jpg"><br><img src="/2023/05/01/DLS7/12.jpg"></p><p><img src="/2023/05/01/DLS7/13.jpg"></p><p><img src="/2023/05/01/DLS7/14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS7/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS7/02.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS7/03.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/0</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史6--龙套A【1】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS6/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS6/</id>
    <published>2023-05-01T13:58:09.587Z</published>
    <updated>2023-04-02T13:08:11.855Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS6/01.jpg"><br><img src="/2023/05/01/DLS6/02.jpg"><br><img src="/2023/05/01/DLS6/03.jpg"><br><img src="/2023/05/01/DLS6/04.jpg"><br><img src="/2023/05/01/DLS6/05.jpg"><br><img src="/2023/05/01/DLS6/06.jpg"><br><img src="/2023/05/01/DLS6/07.jpg"><br><img src="/2023/05/01/DLS6/08.jpg"><br><img src="/2023/05/01/DLS6/09.jpg"><br><img src="/2023/05/01/DLS6/10.jpg"><br><img src="/2023/05/01/DLS6/11.jpg"><br><img src="/2023/05/01/DLS6/12.jpg"></p><p><img src="/2023/05/01/DLS6/13.jpg"></p><p><img src="/2023/05/01/DLS6/14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS6/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS6/02.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS6/03.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/0</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史5--小张【4】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS5/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS5/</id>
    <published>2023-05-01T13:58:09.586Z</published>
    <updated>2023-04-02T13:07:56.517Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS5/01.jpg"></p><p><img src="/2023/05/01/DLS5/02.jpg"></p><p><img src="/2023/05/01/DLS5/03.jpg"></p><p><img src="/2023/05/01/DLS5/04.jpg"></p><p><img src="/2023/05/01/DLS5/05.jpg"></p><p><img src="/2023/05/01/DLS5/06.jpg"></p><p><img src="/2023/05/01/DLS5/07.jpg"></p><p><img src="/2023/05/01/DLS5/08.jpg"></p><p><img src="/2023/05/01/DLS5/09.jpg"></p><p><img src="/2023/05/01/DLS5/10.jpg"></p><p><img src="/2023/05/01/DLS5/11.jpg"></p><p><img src="/2023/05/01/DLS5/12.jpg"></p><p><img src="/2023/05/01/DLS5/13.jpg"></p><p><img src="/2023/05/01/DLS5/14.jpg"></p><p><img src="/2023/05/01/DLS5/15.jpg"></p><p><img src="/2023/05/01/DLS5/16.jpg"></p><p><img src="/2023/05/01/DLS5/17.jpg"></p><p><img src="/2023/05/01/DLS5/18.jpg"></p><p><img src="/2023/05/01/DLS5/19.jpg"></p><p><img src="/2023/05/01/DLS5/20.jpg"></p><p><img src="/2023/05/01/DLS5/21.jpg"></p><p><img src="/2023/05/01/DLS5/22.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS5/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS5/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS5/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史4--思思【1】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS4/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS4/</id>
    <published>2023-05-01T13:58:09.584Z</published>
    <updated>2023-04-02T13:07:36.575Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS4/01.jpg"></p><p><img src="/2023/05/01/DLS4/02.jpg"></p><p><img src="/2023/05/01/DLS4/03.jpg"></p><p><img src="/2023/05/01/DLS4/04.jpg"></p><p><img src="/2023/05/01/DLS4/05.jpg"></p><p><img src="/2023/05/01/DLS4/06.jpg"></p><p><img src="/2023/05/01/DLS4/07.jpg"></p><p><img src="/2023/05/01/DLS4/08.jpg"></p><p><img src="/2023/05/01/DLS4/09.jpg"></p><p><img src="/2023/05/01/DLS4/10.jpg"></p><p><img src="/2023/05/01/DLS4/11.jpg"></p><p><img src="/2023/05/01/DLS4/12.jpg"></p><p><img src="/2023/05/01/DLS4/13.jpg"></p><p><img src="/2023/05/01/DLS4/14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS4/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS4/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS4/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史3--小张【3】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS3/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS3/</id>
    <published>2023-05-01T13:58:09.583Z</published>
    <updated>2023-04-02T12:44:20.894Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS3/01.jpg"></p><p><img src="/2023/05/01/DLS3/02.jpg"></p><p><img src="/2023/05/01/DLS3/03.jpg"></p><p><img src="/2023/05/01/DLS3/04.jpg"></p><p><img src="/2023/05/01/DLS3/05.jpg"></p><p><img src="/2023/05/01/DLS3/06.jpg"></p><p><img src="/2023/05/01/DLS3/07.jpg"></p><p><img src="/2023/05/01/DLS3/08.jpg"></p><p><img src="/2023/05/01/DLS3/09.jpg"></p><p><img src="/2023/05/01/DLS3/10.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS3/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS3/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS3/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史20--回忆【2】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS20/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS20/</id>
    <published>2023-05-01T13:58:09.581Z</published>
    <updated>2023-04-03T02:19:49.502Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS20/01.jpg"><br><img src="/2023/05/01/DLS20/02.jpg"><br><img src="/2023/05/01/DLS20/03.jpg"><br><img src="/2023/05/01/DLS20/04.jpg"><br><img src="/2023/05/01/DLS20/05.jpg"><br><img src="/2023/05/01/DLS20/06.jpg"><br><img src="/2023/05/01/DLS20/07.jpg"><br><img src="/2023/05/01/DLS20/08.jpg"><br><img src="/2023/05/01/DLS20/09.jpg"><br><img src="/2023/05/01/DLS20/10.jpg"><br><img src="/2023/05/01/DLS20/11.jpg"><br><img src="/2023/05/01/DLS20/12.jpg"></p><p><img src="/2023/05/01/DLS20/13.jpg"></p><p><img src="/2023/05/01/DLS20/14.jpg"></p><p><img src="/2023/05/01/DLS20/15.jpg"></p><p><img src="/2023/05/01/DLS20/16.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS20/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS20/02.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/05/01/DLS20/03.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/2023/0</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史2--小张【2】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS2/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS2/</id>
    <published>2023-05-01T13:58:09.580Z</published>
    <updated>2023-04-02T12:38:12.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS2/01.jpg"></p><p><img src="/2023/05/01/DLS2/02.jpg"></p><p><img src="/2023/05/01/DLS2/03.jpg"></p><p><img src="/2023/05/01/DLS2/04.jpg"></p><p><img src="/2023/05/01/DLS2/05.jpg"></p><p><img src="/2023/05/01/DLS2/06.jpg"></p><p><img src="/2023/05/01/DLS2/07.jpg"></p><p><img src="/2023/05/01/DLS2/08.jpg"></p><p><img src="/2023/05/01/DLS2/09.jpg"></p><p><img src="/2023/05/01/DLS2/10.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS2/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS2/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS2/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史19--回忆【1】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS19/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS19/</id>
    <published>2023-05-01T13:58:09.578Z</published>
    <updated>2023-04-03T02:14:47.836Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS19/01.jpg"></p><p><img src="/2023/05/01/DLS19/02.jpg"></p><p><img src="/2023/05/01/DLS19/03.jpg"></p><p><img src="/2023/05/01/DLS19/04.jpg"></p><p><img src="/2023/05/01/DLS19/05.jpg"></p><p><img src="/2023/05/01/DLS19/06.jpg"></p><p><img src="/2023/05/01/DLS19/07.jpg"></p><p><img src="/2023/05/01/DLS19/08.jpg"></p><p><img src="/2023/05/01/DLS19/09.jpg"></p><p><img src="/2023/05/01/DLS19/10.jpg"></p><p><img src="/2023/05/01/DLS19/11.jpg"></p><p><img src="/2023/05/01/DLS19/12.jpg"></p><p><img src="/2023/05/01/DLS19/13.jpg"></p><p><img src="/2023/05/01/DLS19/14.jpg"></p><p><img src="/2023/05/01/DLS19/15.jpg"></p><p><img src="/2023/05/01/DLS19/16.jpg"></p><p><img src="/2023/05/01/DLS19/17.jpg"></p><p><img src="/2023/05/01/DLS19/18.jpg"></p><p><img src="/2023/05/01/DLS19/19.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS19/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS19/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS19/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史18--龙套A【3】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS18/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS18/</id>
    <published>2023-05-01T13:58:09.576Z</published>
    <updated>2023-04-03T02:13:04.718Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS18/01.jpg"></p><p><img src="/2023/05/01/DLS18/02.jpg"></p><p><img src="/2023/05/01/DLS18/03.jpg"></p><p><img src="/2023/05/01/DLS18/04.jpg"></p><p><img src="/2023/05/01/DLS18/05.jpg"></p><p><img src="/2023/05/01/DLS18/06.jpg"></p><p><img src="/2023/05/01/DLS18/07.jpg"></p><p><img src="/2023/05/01/DLS18/08.jpg"></p><p><img src="/2023/05/01/DLS18/09.jpg"></p><p><img src="/2023/05/01/DLS18/10.jpg"></p><p><img src="/2023/05/01/DLS18/11.jpg"></p><p><img src="/2023/05/01/DLS18/12.jpg"></p><p><img src="/2023/05/01/DLS18/13.jpg"></p><p><img src="/2023/05/01/DLS18/14.jpg"></p><p><img src="/2023/05/01/DLS18/15.jpg"></p><p><img src="/2023/05/01/DLS18/16.jpg"></p><p><img src="/2023/05/01/DLS18/17.jpg"></p><p><img src="/2023/05/01/DLS18/18.jpg"></p><p><img src="/2023/05/01/DLS18/19.jpg"></p><p><img src="/2023/05/01/DLS18/20.jpg"></p><p><img src="/2023/05/01/DLS18/21.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS18/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS18/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS18/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史17--红雨【4】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS17/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS17/</id>
    <published>2023-05-01T13:58:09.575Z</published>
    <updated>2023-04-03T02:10:21.378Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS17/01.jpg"></p><p><img src="/2023/05/01/DLS17/02.jpg"></p><p><img src="/2023/05/01/DLS17/03.jpg"></p><p><img src="/2023/05/01/DLS17/04.jpg"></p><p><img src="/2023/05/01/DLS17/05.jpg"></p><p><img src="/2023/05/01/DLS17/06.jpg"></p><p><img src="/2023/05/01/DLS17/07.jpg"></p><p><img src="/2023/05/01/DLS17/08.jpg"></p><p><img src="/2023/05/01/DLS17/09.jpg"></p><p><img src="/2023/05/01/DLS17/10.jpg"></p><p><img src="/2023/05/01/DLS17/11.jpg"></p><p><img src="/2023/05/01/DLS17/12.jpg"></p><p><img src="/2023/05/01/DLS17/13.jpg"></p><p><img src="/2023/05/01/DLS17/14.jpg"></p><p><img src="/2023/05/01/DLS17/15.jpg"></p><p><img src="/2023/05/01/DLS17/16.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS17/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS17/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS17/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史16--红雨【3】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS16/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS16/</id>
    <published>2023-05-01T13:58:09.574Z</published>
    <updated>2023-04-03T02:08:22.487Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS16/01.jpg"></p><p><img src="/2023/05/01/DLS16/02.jpg"></p><p><img src="/2023/05/01/DLS16/03.jpg"></p><p><img src="/2023/05/01/DLS16/04.jpg"></p><p><img src="/2023/05/01/DLS16/05.jpg"></p><p><img src="/2023/05/01/DLS16/06.jpg"></p><p><img src="/2023/05/01/DLS16/07.jpg"></p><p><img src="/2023/05/01/DLS16/08.jpg"></p><p><img src="/2023/05/01/DLS16/09.jpg"></p><p><img src="/2023/05/01/DLS16/10.jpg"></p><p><img src="/2023/05/01/DLS16/11.jpg"></p><p><img src="/2023/05/01/DLS16/12.jpg"></p><p><img src="/2023/05/01/DLS16/13.jpg"></p><p><img src="/2023/05/01/DLS16/14.jpg"></p><p><img src="/2023/05/01/DLS16/15.jpg"></p><p><img src="/2023/05/01/DLS16/16.jpg"></p><p><img src="/2023/05/01/DLS16/17.jpg"></p><p><img src="/2023/05/01/DLS16/18.jpg"></p><p><img src="/2023/05/01/DLS16/19.jpg"></p><p><img src="/2023/05/01/DLS16/20.jpg"></p><p><img src="/2023/05/01/DLS16/21.jpg"></p><p><img src="/2023/05/01/DLS16/22.jpg"></p><p><img src="/2023/05/01/DLS16/23.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS16/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS16/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS16/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史15--红雨【2】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS15/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS15/</id>
    <published>2023-05-01T13:58:09.572Z</published>
    <updated>2023-04-03T02:07:06.211Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS15/01.jpg"></p><p><img src="/2023/05/01/DLS15/02.jpg"></p><p><img src="/2023/05/01/DLS15/03.jpg"></p><p><img src="/2023/05/01/DLS15/04.jpg"></p><p><img src="/2023/05/01/DLS15/05.jpg"></p><p><img src="/2023/05/01/DLS15/06.jpg"></p><p><img src="/2023/05/01/DLS15/07.jpg"></p><p><img src="/2023/05/01/DLS15/08.jpg"></p><p><img src="/2023/05/01/DLS15/09.jpg"></p><p><img src="/2023/05/01/DLS15/10.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS15/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS15/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS15/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史14--红雨【1】</title>
    <link href="https://shuoandy.github.io/2023/05/01/DLS14/"/>
    <id>https://shuoandy.github.io/2023/05/01/DLS14/</id>
    <published>2023-05-01T13:58:09.571Z</published>
    <updated>2023-04-03T02:06:11.875Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/05/01/DLS14/01.jpg"></p><p><img src="/2023/05/01/DLS14/02.jpg"></p><p><img src="/2023/05/01/DLS14/03.jpg"></p><p><img src="/2023/05/01/DLS14/04.jpg"></p><p><img src="/2023/05/01/DLS14/05.jpg"></p><p><img src="/2023/05/01/DLS14/06.jpg"></p><p><img src="/2023/05/01/DLS14/07.jpg"></p><p><img src="/2023/05/01/DLS14/08.jpg"></p><p><img src="/2023/05/01/DLS14/09.jpg"></p><p><img src="/2023/05/01/DLS14/10.jpg"></p><p><img src="/2023/05/01/DLS14/11.jpg"></p><p><img src="/2023/05/01/DLS14/12.jpg"></p><p><img src="/2023/05/01/DLS14/13.jpg"></p><p><img src="/2023/05/01/DLS14/14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS14/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS14/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/05/01/DLS14/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img </summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="https://shuoandy.github.io/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
</feed>
