<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Andy&#39;s blog</title>
  
  <subtitle>面向小白编程！</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-02T13:01:15.981Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Andy</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>笛子的单恋史8--小张【5】</title>
    <link href="http://example.com/2023/04/02/DLS8/"/>
    <id>http://example.com/2023/04/02/DLS8/</id>
    <published>2023-04-02T13:00:04.182Z</published>
    <updated>2023-04-02T13:01:15.981Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/01.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/02.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/03.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/04.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/05.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/06.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/07.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/08.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/09.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/10.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/11.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/12.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/13.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/14.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/15.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/16.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS8/ShuoAndy.github.io/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/ShuoAndy/Shu</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史7--龙套A【2】</title>
    <link href="http://example.com/2023/04/02/DLS7/"/>
    <id>http://example.com/2023/04/02/DLS7/</id>
    <published>2023-04-02T12:57:32.326Z</published>
    <updated>2023-04-02T12:59:13.344Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/01.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/02.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/03.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/04.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/05.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/06.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/07.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/08.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/09.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/10.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/11.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/12.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/13.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS7/ShuoAndy.github.io/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/ShuoAndy/Shu</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史6--龙套A【1】</title>
    <link href="http://example.com/2023/04/02/DLS6/"/>
    <id>http://example.com/2023/04/02/DLS6/</id>
    <published>2023-04-02T12:53:50.686Z</published>
    <updated>2023-04-02T12:57:03.572Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/01.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/02.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/03.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/04.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/05.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/06.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/07.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/08.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/09.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/10.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/11.jpg"><br><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/12.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/13.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS6/ShuoAndy.github.io/01.jpg&quot;&gt;&lt;br&gt;&lt;img src=&quot;/ShuoAndy/Shu</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史5--小张【4】</title>
    <link href="http://example.com/2023/04/02/DLS5/"/>
    <id>http://example.com/2023/04/02/DLS5/</id>
    <published>2023-04-02T12:49:50.528Z</published>
    <updated>2023-04-02T12:52:27.455Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/01.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/02.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/03.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/04.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/05.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/06.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/07.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/08.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/09.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/10.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/11.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/12.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/13.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/14.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/15.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/16.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/17.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/18.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/19.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/20.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/21.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/22.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS5/ShuoAndy.github.io/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/ShuoAndy</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史4--思思【1】</title>
    <link href="http://example.com/2023/04/02/DLS4/"/>
    <id>http://example.com/2023/04/02/DLS4/</id>
    <published>2023-04-02T12:46:27.228Z</published>
    <updated>2023-04-02T12:48:51.403Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/01.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/02.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/03.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/04.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/05.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/06.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/07.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/08.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/09.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/10.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/11.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/12.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/13.jpg"></p><p><img src="/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/14.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/ShuoAndy/ShuoAndy.github.io/ShuoAndy/ShuoAndy.github.io/2023/04/02/DLS4/ShuoAndy.github.io/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/ShuoAndy</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史3--小张【3】</title>
    <link href="http://example.com/2023/04/02/DLS3/"/>
    <id>http://example.com/2023/04/02/DLS3/</id>
    <published>2023-04-02T12:43:20.848Z</published>
    <updated>2023-04-02T12:44:20.894Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/04/02/DLS3/01.jpg"></p><p><img src="/2023/04/02/DLS3/02.jpg"></p><p><img src="/2023/04/02/DLS3/03.jpg"></p><p><img src="/2023/04/02/DLS3/04.jpg"></p><p><img src="/2023/04/02/DLS3/05.jpg"></p><p><img src="/2023/04/02/DLS3/06.jpg"></p><p><img src="/2023/04/02/DLS3/07.jpg"></p><p><img src="/2023/04/02/DLS3/08.jpg"></p><p><img src="/2023/04/02/DLS3/09.jpg"></p><p><img src="/2023/04/02/DLS3/10.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS3/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS3/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS3/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史2--小张【2】</title>
    <link href="http://example.com/2023/04/02/DLS2/"/>
    <id>http://example.com/2023/04/02/DLS2/</id>
    <published>2023-04-02T12:36:23.429Z</published>
    <updated>2023-04-02T12:38:12.594Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/04/02/DLS2/01.jpg"></p><p><img src="/2023/04/02/DLS2/02.jpg"></p><p><img src="/2023/04/02/DLS2/03.jpg"></p><p><img src="/2023/04/02/DLS2/04.jpg"></p><p><img src="/2023/04/02/DLS2/05.jpg"></p><p><img src="/2023/04/02/DLS2/06.jpg"></p><p><img src="/2023/04/02/DLS2/07.jpg"></p><p><img src="/2023/04/02/DLS2/08.jpg"></p><p><img src="/2023/04/02/DLS2/09.jpg"></p><p><img src="/2023/04/02/DLS2/10.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS2/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS2/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS2/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>笛子的单恋史1--小张【1】</title>
    <link href="http://example.com/2023/04/02/DLS1/"/>
    <id>http://example.com/2023/04/02/DLS1/</id>
    <published>2023-04-02T12:26:01.492Z</published>
    <updated>2023-04-02T12:36:12.843Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/2023/04/02/DLS1/01.jpg"></p><p><img src="/2023/04/02/DLS1/02.jpg"></p><p><img src="/2023/04/02/DLS1/03.jpg"></p><p><img src="/2023/04/02/DLS1/04.jpg"></p><p><img src="/2023/04/02/DLS1/05.jpg"></p><p><img src="/2023/04/02/DLS1/06.jpg"></p><p><img src="/2023/04/02/DLS1/07.jpg"></p><p><img src="/2023/04/02/DLS1/08.jpg"></p><p><img src="/2023/04/02/DLS1/09.jpg"></p><p><img src="/2023/04/02/DLS1/10.jpg"></p><p><img src="/2023/04/02/DLS1/11.jpg"></p><p><img src="/2023/04/02/DLS1/12.jpg"></p><p><img src="/2023/04/02/DLS1/13.jpg"></p><p><img src="/2023/04/02/DLS1/14.jpg"></p><p><img src="/2023/04/02/DLS1/15.jpg"></p><p><img src="/2023/04/02/DLS1/16.jpg"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS1/01.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS1/02.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2023/04/02/DLS1/03.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src</summary>
      
    
    
    
    <category term="笛子的单恋史" scheme="http://example.com/categories/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
    
    <category term="笛子的单恋史" scheme="http://example.com/tags/%E7%AC%9B%E5%AD%90%E7%9A%84%E5%8D%95%E6%81%8B%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>dsa个人题库</title>
    <link href="http://example.com/2023/04/02/dsa/"/>
    <id>http://example.com/2023/04/02/dsa/</id>
    <published>2023-04-02T08:07:38.342Z</published>
    <updated>2023-04-02T12:35:38.111Z</updated>
    
    <content type="html"><![CDATA[<p>本文是作者在复习数据结构刷题的时候遇到的简单但不完全简单的小题（大题的话博主已经弃疗了…要杀要刮随邓公了）。dsa知识点相当的多，随便举一些例子吧：主定理、动态规划、向量列表、先序遍历的递归&#x2F;迭代版、AVL树和红黑树、散列冲突、dijkstra、堆合并、KMP算法、各种各样的排序（以及它们的性质和改进）…</p><p>总之，这些题目是巩固理解、记牢算法的好选择，而难度较大的证明大题则超出了博主的理解范围…假若将来博主需要复习dsa，或者真的有学弟学妹会看到这篇题库，那么希望这些题目能对将来的我&#x2F;别人有一丁点帮助…</p><h3 id="1、对于二分查找版本C，当查找区间的长度缩小为0时，V-lo-是："><a href="#1、对于二分查找版本C，当查找区间的长度缩小为0时，V-lo-是：" class="headerlink" title="1、对于二分查找版本C，当查找区间的长度缩小为0时，V[lo]是："></a>1、对于二分查找版本C，当查找区间的长度缩小为0时，V[lo]是：</h3><p>min{0 &lt; r &lt; n|e &lt; V[r]}。因为<strong>事实上命中的秩是lo-1</strong>，而lo-1右边的（也就是从lo开始的左闭右开区间）都是严格大于e的元素。故而V[lo]是大于e的，而v[lo-1]不大于e。顺便一提，向量中的lo和hi永远是左闭右开区间，即[lo，hi）。</p><h3 id="2、在有序向量V中插入元素e并使之保持有序，下列代码正确的是"><a href="#2、在有序向量V中插入元素e并使之保持有序，下列代码正确的是" class="headerlink" title="2、在有序向量V中插入元素e并使之保持有序，下列代码正确的是:"></a>2、在有序向量V中插入元素e并使之保持有序，下列代码正确的是:</h3><p>V.insert(V.Search(e)+1,e)。V.Search(e)应当+1，否则会将最后一个元素挤掉。</p><h3 id="3、是否可以将视频里向量扩容代码中的："><a href="#3、是否可以将视频里向量扩容代码中的：" class="headerlink" title="3、是否可以将视频里向量扩容代码中的："></a>3、是否可以将视频里向量扩容代码中的：</h3><h5 id="for-int-i-0-i-lt-size-i-elem-i-oldElem-i"><a href="#for-int-i-0-i-lt-size-i-elem-i-oldElem-i" class="headerlink" title="for (int i = 0; i &lt; _size; i++) _elem[i] = oldElem[i];"></a><code>for (int i = 0; i &lt; _size; i++) _elem[i] = oldElem[i];</code></h5><h5 id="替代为："><a href="#替代为：" class="headerlink" title="替代为："></a>替代为：</h5><h5 id="memcpy-elem-oldElem-size-sizeof-T"><a href="#memcpy-elem-oldElem-size-sizeof-T" class="headerlink" title="memcpy(_elem, oldElem, _size * sizeof(T));"></a><code>memcpy(_elem, oldElem, _size * sizeof(T));</code></h5><p>不可以，与T的数据类型有关。简单地说，假如T不是基本数据类型例如string或一个类，那么&#x3D;号或许是重载过的，<strong>前者相当于深拷贝；而memcpy是浅拷贝</strong>（假如你去查memcpy的源代码的话会发现它就是在逐字节地复制hhhh），析构的时候可能会报错！</p><h3 id="4、用分而治之的思想来解决长度为n的数组的求和问题（n足够大），递归实例的数目会比用减而治之的方法少。"><a href="#4、用分而治之的思想来解决长度为n的数组的求和问题（n足够大），递归实例的数目会比用减而治之的方法少。" class="headerlink" title="4、用分而治之的思想来解决长度为n的数组的求和问题（n足够大），递归实例的数目会比用减而治之的方法少。"></a>4、用分而治之的思想来解决长度为n的数组的求和问题（n足够大），递归实例的数目会比用减而治之的方法少。</h3><p>错，在这个问题上，分而治之和减而治之的效率相同，时间复杂度均为O(n)。</p><h3 id="5、直接用定义以递归的方式计算fib-n-的时间复杂度是Θ-2-n-："><a href="#5、直接用定义以递归的方式计算fib-n-的时间复杂度是Θ-2-n-：" class="headerlink" title="5、直接用定义以递归的方式计算fib(n)的时间复杂度是Θ(2^n)："></a>5、直接用定义以递归的方式计算fib(n)的时间复杂度是Θ(2^n)：</h3><p>错，实际上时间复杂度是Θ(1.618^n)，故而只能说**是O(2^n)而非θ(2^n)**。</p><h3 id="6、在向量V-x3D-2-3-5-7-11-13-17-19-23-中用插值查找搜索元素7，猜测的轴点mi为："><a href="#6、在向量V-x3D-2-3-5-7-11-13-17-19-23-中用插值查找搜索元素7，猜测的轴点mi为：" class="headerlink" title="6、在向量V&#x3D;{2, 3, 5, 7, 11, 13, 17, 19, 23}中用插值查找搜索元素7，猜测的轴点mi为："></a>6、在向量V&#x3D;{2, 3, 5, 7, 11, 13, 17, 19, 23}中用插值查找搜索元素7，猜测的轴点mi为：</h3><p>答案为1。*<em>mi&#x3D;lo+(hi-lo)</em>(e-V[lo])&#x2F;(V[hi]-V[lo])**。</p><h3 id="7、长度为n的列表，被等分为n-x2F-k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为："><a href="#7、长度为n的列表，被等分为n-x2F-k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为：" class="headerlink" title="7、长度为n的列表，被等分为n&#x2F;k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为："></a>7、长度为n的列表，被等分为n&#x2F;k段，每段长度为k，不同段之间的元素不存在逆序。对该列表进行插入排序的最坏时间复杂度为：</h3><p>O(n k)。插入排序的时间复杂度&#x3D;O(n+I)，其中I为逆序对（不是相邻逆序对）的数量。本题中最多有 n &#x2F; k * k^2&#x3D; n * k个逆序对。</p><p>顺便一提，<strong>逆序对与插入排序相关，而循环节与选择排序相关</strong>（循环节的数量决定了选择排序中“无效交换”的次数，期望为θ(log n) ）。</p><h3 id="8、（在中缀表达式求值中）什么时候进行实际的运算？"><a href="#8、（在中缀表达式求值中）什么时候进行实际的运算？" class="headerlink" title="8、（在中缀表达式求值中）什么时候进行实际的运算？"></a>8、（在中缀表达式求值中）什么时候进行实际的运算？</h3><p>当前的操作符比栈顶的操作符优先级低时，即栈顶运算符优先级高时。因为每次运算都是对于栈顶运算符的运算。</p><h3 id="9、在一棵树中-顶点p是顶点v的父亲-则它们的高度的关系是否为height-v-x3D-height-p-1？"><a href="#9、在一棵树中-顶点p是顶点v的父亲-则它们的高度的关系是否为height-v-x3D-height-p-1？" class="headerlink" title="9、在一棵树中,顶点p是顶点v的父亲,则它们的高度的关系是否为height(v)&#x3D;height(p)-1？"></a>9、在一棵树中,顶点p是顶点v的父亲,则它们的高度的关系是否为height(v)&#x3D;height(p)-1？</h3><p>不一定，比如p的左孩子是v，右孩子有一棵很大的子树，此时height(v)&#x3D;0而height(p)&#x3D;k。故而只能说height(v)&lt;height(p)。</p><h3 id="10、对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为"><a href="#10、对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为" class="headerlink" title="10、对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为:"></a>10、对以下二叉树进行先序遍历，刚访问完节点d时（迭代实现2）栈中的元素从栈顶到栈底依次为:</h3><p><img src="/2023/04/02/dsa/1.jpg"></p><p>只有f。</p><p>事实上，“沿藤爬取”算法会先访问该节点，再将该节点的右孩子推入栈，并顺左侧藤下行。主算法会试图对每次调用“沿藤爬取”算法，并在无法继续爬取后将栈顶pop掉，再次对该元素进行爬取。</p><p>故而首先对a爬取，访问a，将c压栈，再访问b。此时“沿藤爬取”算法结束，将c pop掉并沿c爬取，访问c，将f压栈，再访问d，再将e压栈。故而刚访问完d的时候栈中只有c的右孩子f。</p><h3 id="12、对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为"><a href="#12、对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为" class="headerlink" title="12、对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为:"></a>12、对以下二叉树进行中序遍历，节点c刚被访问完毕时栈中的元素从栈顶到栈底为:</h3><p><img src="/2023/04/02/dsa/6a847e3de9105b2fa947e777fad2235.jpg"></p><p>d和f。</p><p>中序遍历时，“沿藤爬取”算法会将每个节点入栈，直到爬完为止。回到主算法，算法会pop掉栈顶元素并访问它，同时试图进入它的右孩子。若有右孩子，则以右孩子为根实施“沿藤爬取”算法，若没有右孩子，则会再pop掉栈顶元素，以此为根实施“沿藤爬取”算法。</p><p>故而首先对b爬取，b入栈，a入栈，访问a，访问b，并且转向其右孩子f，对f进行爬取会将f，d，c入栈，访问c。</p><h3 id="13、对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为"><a href="#13、对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为" class="headerlink" title="13、对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为:"></a>13、对以下二叉树进行层次遍历，节点F正欲出队时队列中的元素从队头到队尾为:</h3><p><img src="/2023/04/02/dsa/4575cfc47ab97c73e4b59c1401d8064.jpg"></p><p>f和g。</p><p>请注意，层次遍历使用的辅助数据结构不是栈，而是队列。也没有藤算法，只有一个主算法。主算法会将根入队，并且每次循环将队首出队并访问，并将其左孩子入队、右孩子入队。</p><p>访问A，将B入队。访问B，将C和D依次入队…本算法比先序中序容易很多。</p><h3 id="14、从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O-n-？"><a href="#14、从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O-n-？" class="headerlink" title="14、从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O(n)？"></a>14、从n个节点的二叉树的叶节点u逐个节点地上溯到根节点的过程中，最坏时间复杂度为O(n)？</h3><p>正确，因为极端退化的二叉树就是链表（即所有节点都只有一个孩子），BST也是一样的。</p><h3 id="15、AVL树插入节点最多会使多少节点失衡？删除节点呢？"><a href="#15、AVL树插入节点最多会使多少节点失衡？删除节点呢？" class="headerlink" title="15、AVL树插入节点最多会使多少节点失衡？删除节点呢？"></a>15、AVL树插入节点最多会使多少节点失衡？删除节点呢？</h3><p>O(log n)和O(1)。事实上，删除节点至多只会令一个节点失衡。</p><p>值得一提的是，插入节点后失衡的节点最低为其祖父（爷爷），而删除节点后失衡的节点最低可以是其父亲。但在调整时，插入导致的失衡只需一次单旋&#x2F;双旋即可，而删除导致的失衡却可能需要至多O(log n)次单旋&#x2F;双旋。</p><h3 id="16、AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g-p-v的子树高度"><a href="#16、AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g-p-v的子树高度" class="headerlink" title="16、AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g,p,v的子树高度"></a>16、AVL树中删除节点引发失衡，经旋转调整后重新平衡，此时包含节点g,p,v的子树高度</h3><p>有可能不变也有可能减小1。请注意这里的子树高度是相比于原AVL树而言，即删除操作之前的树。如果子树高度不变，那么全树复衡；高度减1，则需要向上继续旋转。</p><p>顺便一说，插入节点后旋转，其子树高度一定不变，这也对应了上一个问题中所说的，插入后只需一次单旋&#x2F;双旋。</p><h3 id="17、伸展树采用双层伸展策略，即可避免最坏情况的发生？"><a href="#17、伸展树采用双层伸展策略，即可避免最坏情况的发生？" class="headerlink" title="17、伸展树采用双层伸展策略，即可避免最坏情况的发生？"></a>17、伸展树采用双层伸展策略，即可避免最坏情况的发生？</h3><p>错误。【这道题有点文字游戏…】只能减小最坏情况的频率，也就是最坏情况不致持续发生，但仍可能极少地发生。</p><h3 id="18、如果说访问一次内存需要1秒，则一次外存访问大概需要："><a href="#18、如果说访问一次内存需要1秒，则一次外存访问大概需要：" class="headerlink" title="18、如果说访问一次内存需要1秒，则一次外存访问大概需要："></a>18、如果说访问一次内存需要1秒，则一次外存访问大概需要：</h3><p>一天。访问内存需要100 ns，而磁盘访问需要10^7 ns。两者相差10^5倍。</p><h3 id="19、教材P-802的重散列（rehash）一定是扩容操作吗？"><a href="#19、教材P-802的重散列（rehash）一定是扩容操作吗？" class="headerlink" title="19、教材P 802的重散列（rehash）一定是扩容操作吗？"></a>19、教材P 802的重散列（rehash）一定是扩容操作吗？</h3><p>不一定。如果懒惰删除的标记太多，那么4 N（其中N是当前真实的非空桶，不包括懒惰删除标记）不一定比当前散列表的长度大，此时的重散列反而是缩容操作。这也是为什么我们不用2 M（M是散列表长度）而用4 N的原因。</p><h3 id="20、红黑树在每次插入-x2F-删除操作后，拓扑结构的变化不超过O-1-。"><a href="#20、红黑树在每次插入-x2F-删除操作后，拓扑结构的变化不超过O-1-。" class="headerlink" title="20、红黑树在每次插入&#x2F;删除操作后，拓扑结构的变化不超过O(1)。"></a>20、红黑树在每次插入&#x2F;删除操作后，拓扑结构的变化不超过O(1)。</h3><p>正确。事实上，这是红黑树非常重要的性质之一。而AVL树虽然插入操作满足题意，但正如16题所说，删除操作可能会有O(log n)级别的拓扑改变。</p><h3 id="21、所有AVL树可以染成红黑树，所有红黑树都是AVL树。"><a href="#21、所有AVL树可以染成红黑树，所有红黑树都是AVL树。" class="headerlink" title="21、所有AVL树可以染成红黑树，所有红黑树都是AVL树。"></a>21、所有AVL树可以染成红黑树，所有红黑树都是AVL树。</h3><p>错误。前半句正确，只需将高度为偶数的非根节点，染为红色，否则染为黑色。因为AVL的对于左右子树高度的平衡要求比红黑树更加严格，因此有些红黑树可能不满足AVL的要求。【该题存疑！】</p><h3 id="22、当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为："><a href="#22、当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为：" class="headerlink" title="22、当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为："></a>22、当叔父节点u为红色时，修正双红缺陷导致的红黑树拓扑结构的变化为：</h3><p>没有变化。RR1（叔父为黑）会改变O(1)的拓扑结构，但会立刻终止修正；而RR2（叔父为红）不会改变任何拓扑结构（而仅仅是将颜色重染），但可能会向上传递双红缺陷。</p><p>另一方面，对于删除操作，对于叔父节点、叔父节点的孩子、祖父的颜色共有四种情况，其中BB-1、BB-2R都是一蹴而就的，BB-3是两蹴而就的，只有BB-2B（叔父节点为黑、叔父节点的孩子均为黑、祖父为黑）的情况可能向上传递双黑缺陷；但只有BB-1和BB-3会改变拓扑结构，故而跟如20题所说，红黑树的插入、删除操作都不会使拓扑结构改变较大。</p><h3 id="23、伸展树单次查找操作的最坏时间复杂度比AVL树大。"><a href="#23、伸展树单次查找操作的最坏时间复杂度比AVL树大。" class="headerlink" title="23、伸展树单次查找操作的最坏时间复杂度比AVL树大。"></a>23、伸展树单次查找操作的最坏时间复杂度比AVL树大。</h3><p>正确。在单链伸展树中插入叶子元素，需要一直向上双层伸展（事实上双层伸展也是“逐层”伸展，只是顺序略有不同），此时复杂度为O(n)。</p><p>值得一提的是，在分摊分析的时候，我们为了避免这样的情况，将分摊时间记为A，其等于实际时间T与势能差delta的和。其中势能可以理解为“银行”，简单操作省下来的时间会“积德行善”地存入一些多余的时间，在遇到最坏情况时我们再将这些“存款”取出，用于弥补不足。如是便能均衡地“劫富济贫”，完成分析。每一步的A之和不大于每一步的T之和，而每一步的A均不超过log n（当T为θ(n)时，势能函数会为一个θ(n)级别的负数）。具体过程请见邓公编写的习题解析8-2。</p><h3 id="24、对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为："><a href="#24、对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为：" class="headerlink" title="24、对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为："></a>24、对于长度为n的文本串和长度为m的模式串，KMP算法的时间复杂度为：</h3><p>O(n)。假如我们粗略地估计时间复杂度，大概率得出的结论是O(m*n)…然而假如我们记录一个观察值k&#x3D;2 i - j，那么我们会发现无论是失败匹配还是成功匹配，其都会使得观察值k严格递增（至少加1），于是迭代过程至多不会超过2 n次，即时间复杂度为O(n)。（说是O(m+n)也行）</p><h3 id="25、有2015个节点的左式堆，左子堆的规模最小为？"><a href="#25、有2015个节点的左式堆，左子堆的规模最小为？" class="headerlink" title="25、有2015个节点的左式堆，左子堆的规模最小为？"></a>25、有2015个节点的左式堆，左子堆的规模最小为？</h3><p>1。事实上正如教材所说，左式堆的左子堆未必要比右子堆“大”很多，左子堆的规模和高度都不一定大于其兄弟，甚至可以夸张到本题的程度。本题的例子是根的左子堆只有一个节点，右子堆根节点只有左孩子，其左孩子亦只有左孩子…即每个节点的右侧链都只有其本身，这样每个节点的npl均等于其右侧链长度1。</p><h3 id="26、与MAD相比，除余法的缺陷在于："><a href="#26、与MAD相比，除余法的缺陷在于：" class="headerlink" title="26、与MAD相比，除余法的缺陷在于："></a>26、与MAD相比，除余法的缺陷在于：</h3><p>不动点和高阶均匀性（相关性）。不动点是指hash(0)&#x3D;0；高阶均匀性指相邻的关键码的地址一定相邻。而multipy-add-divide方法便不会有这些问题。</p><h3 id="27、将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。"><a href="#27、将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。" class="headerlink" title="27、将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。"></a>27、将1、2、3…2018插入到一个空伸展树中，若最终树高为2017，则插入的次序一定是单调的。</h3><p>错误。比如1，2，3，4，6，5，7，由于在7插入的时候会重新将splay tree变成单链，故诸如此类的操作仍然会形成单链。</p><h3 id="28、linearselect最坏复杂度为？"><a href="#28、linearselect最坏复杂度为？" class="headerlink" title="28、linearselect最坏复杂度为？"></a>28、linearselect最坏复杂度为？</h3><p>O(n)。事实上，见教材 P 1274，我们取一堆小子序列中位数的中位数，以此作为轴点来解决轴点选取过差的问题。（此时轴点至少能排除n&#x2F;4长度的差区间）我们得出如下公式：T(n)&#x3D; c n+ T(n&#x2F;Q) + T(3&#x2F;(4 n))。</p><h3 id="29、图的广度优先搜索访问各顶点的模式类似于二叉树的："><a href="#29、图的广度优先搜索访问各顶点的模式类似于二叉树的：" class="headerlink" title="29、图的广度优先搜索访问各顶点的模式类似于二叉树的："></a>29、图的广度优先搜索访问各顶点的模式类似于二叉树的：</h3><p>层次遍历。顺便一说，深度优先搜索类似于先序遍历。</p><h3 id="30、多叉堆比二叉堆的操作复杂度更高？"><a href="#30、多叉堆比二叉堆的操作复杂度更高？" class="headerlink" title="30、多叉堆比二叉堆的操作复杂度更高？"></a>30、多叉堆比二叉堆的操作复杂度更高？</h3><p>错误。事实上，上滤成本是降低至log d n，而（由于至多需要比对d个孩子）下滤成本会升高至d * log d n。当d约等于2+e&#x2F;n时，优先级搜索的效率会达到最优 e*log (2+e&#x2F;n) n。另一方面，d最好是2的次幂，否则不能直接借助移位操作来加快秩的计算。</p><h3 id="31、在理想随机下，quickselect（k-select）的复杂度及其证明？"><a href="#31、在理想随机下，quickselect（k-select）的复杂度及其证明？" class="headerlink" title="31、在理想随机下，quickselect（k-select）的复杂度及其证明？"></a>31、在理想随机下，quickselect（k-select）的复杂度及其证明？</h3><p>O(n)。我们记T(n)为期望比较次数，T(n) &lt;&#x3D; (n-1) + (2&#x2F;n)*( T(2&#x2F;n) + T(1+2&#x2F;n) + … + T(n-1) )，在此我们<strong>大胆猜测</strong>T(n)&lt; 4 n，归纳证明该结论是正确的。</p><h3 id="32、下图是一个三叉树实现的trie树，请写出其中储存的所有单词："><a href="#32、下图是一个三叉树实现的trie树，请写出其中储存的所有单词：" class="headerlink" title="32、下图是一个三叉树实现的trie树，请写出其中储存的所有单词："></a>32、下图是一个三叉树实现的trie树，请写出其中储存的所有单词：</h3><p><img src="/2023/04/02/dsa/593ec60e90487b413ecea3ed74aa70e.png"></p><p>（顺序无关）how many roads must a man walk down. </p><p>三叉trie树的左右孩子都是“另开炉灶”的，只有中孩子继承了父亲的字母，比如中间的must，u是m的中孩子，s是u的中孩子，t是u的中孩子，故而有must。而d是m的左孩子，故而d没有继承m，该单词为down而非mdown。</p><h3 id="33、在散列表中，一个好的散列函数h需要是单射？"><a href="#33、在散列表中，一个好的散列函数h需要是单射？" class="headerlink" title="33、在散列表中，一个好的散列函数h需要是单射？"></a>33、在散列表中，一个好的散列函数h需要是单射？</h3><p>错误。事实上不可能是单射，因为可用地址空间比所有词条的空间要小，所以一定会有多个词条映射到同一个地址。</p><h3 id="34、若某算法的时间复杂度递归式可写为T-n-x3D-2020-T-n-1-x2F-2020-O-log-n-，求其渐进复杂度。"><a href="#34、若某算法的时间复杂度递归式可写为T-n-x3D-2020-T-n-1-x2F-2020-O-log-n-，求其渐进复杂度。" class="headerlink" title="34、若某算法的时间复杂度递归式可写为T(n)&#x3D;2020 * T(n^(1&#x2F;2020)) + O(log n)，求其渐进复杂度。"></a>34、若某算法的时间复杂度递归式可写为T(n)&#x3D;2020 * T(n^(1&#x2F;2020)) + O(log n)，求其渐进复杂度。</h3><p>log n* log log n。本题的递归式不是主定理传统的n&#x2F;b，故而看起来我们对其无可奈何；但假如我们设m &#x3D; log n，那么原式变成T(n) &#x3D;R(m) &#x3D; 2020 * R(m&#x2F;2020) + O(m)，故而得出结论。</p><h3 id="35、请证明，如果表长为4k-3的素数，那么双向平方试探的确可以遍历所有地址空间。"><a href="#35、请证明，如果表长为4k-3的素数，那么双向平方试探的确可以遍历所有地址空间。" class="headerlink" title="35、请证明，如果表长为4k+3的素数，那么双向平方试探的确可以遍历所有地址空间。"></a>35、请证明，如果表长为4k+3的素数，那么双向平方试探的确可以遍历所有地址空间。</h3><p>首先，我们需要引入费马双平方引理及其推论，即一个自然数是两个整数的平方和当且仅当其4k+3形式的素因子的次数为偶数。如45&#x3D;5*3^2，其等于9+36。</p><p>我们首先易得，正向试探中0 – 2k+1的模是互异的，而2k+2 – 4k+3与其完全对称。简单来说，n^2-m^2能被该素数整除当且仅当n+m等于该素数。</p><p>然后我们证明，反向试探中0 – 2k+1（同上，是互异的）与正向试探除了0之外，模都是互异的。否则，n^2+m^2可以被该素数整除，但由费马双平方引理知其只能整除该素数的平方、四次方…而这显然是不可能的，因为n^2+m^2小于该素数平方。</p><p>由此证毕，正向试探共有2k+2个（算上0），而反向试探共有2k+1个。</p><h3 id="36、基于比较的排序算法，对于任何输入序列都需要至少Ω-n-log-n-时间。"><a href="#36、基于比较的排序算法，对于任何输入序列都需要至少Ω-n-log-n-时间。" class="headerlink" title="36、基于比较的排序算法，对于任何输入序列都需要至少Ω(n log n)时间。"></a>36、基于比较的排序算法，对于任何输入序列都需要至少Ω(n log n)时间。</h3><p>错误。正如第七题所说，插入排序是输入敏感的，其最好情况只需O(n)时间。</p><h3 id="37、在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。"><a href="#37、在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。" class="headerlink" title="37、在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。"></a>37、在二叉树的先序、中序、后序遍历中，叶子节点的次序都是一样的。</h3><p>正确。这是一个蛮有意思的小结论。</p><h3 id="38、基于二分查询A版本改进的fib查找，对于长度为n-x3D-fib-k-1的向量，最坏查找长度为？"><a href="#38、基于二分查询A版本改进的fib查找，对于长度为n-x3D-fib-k-1的向量，最坏查找长度为？" class="headerlink" title="38、基于二分查询A版本改进的fib查找，对于长度为n&#x3D;fib(k)-1的向量，最坏查找长度为？"></a>38、基于二分查询A版本改进的fib查找，对于长度为n&#x3D;fib(k)-1的向量，最坏查找长度为？</h3><p>k-1。可以用归纳证明：由于fib(k)-1左右区间分别为fib(k-1)-1和fib(k-2)-1，向左的最坏长度为k-2+1，向右的最坏长度为k-3+2，均为k-1。本题也体现了最坏情况下fib查找的均衡性。</p><h3 id="39、具有2020个内部节点的红黑树的最大黑高度是？"><a href="#39、具有2020个内部节点的红黑树的最大黑高度是？" class="headerlink" title="39、具有2020个内部节点的红黑树的最大黑高度是？"></a>39、具有2020个内部节点的红黑树的最大黑高度是？</h3><p>10。黑高度&#x3D;其等价B树的高度，其等于1+log m&#x2F;2 (N+1&#x2F;2)向下取整。另一方面，最大高度有些困难，我们试图让一个红黑树的高度等于其黑高度的二倍，并且用尽可能少的节点，故而我们只用h&#x2F;2个红色节点即可。后续计算相对麻烦，详见习题解析8-13。</p><h3 id="40、请证明：高度为h的AVL树，其叶子节点的深度不会小于h-x2F-2向上取整。"><a href="#40、请证明：高度为h的AVL树，其叶子节点的深度不会小于h-x2F-2向上取整。" class="headerlink" title="40、请证明：高度为h的AVL树，其叶子节点的深度不会小于h&#x2F;2向上取整。"></a>40、请证明：高度为h的AVL树，其叶子节点的深度不会小于h&#x2F;2向上取整。</h3><p><strong>对h做归纳</strong>（h&#x3D;1时显然）。假设以上命题对高度小于h的AVL 树均成立，以下考查高度为h的AVL树：</p><p>由于左、右子树的高度至多为h - 1，至少为h - 2，由归纳假设，高度h-1的叶子节点到该子树根的深度至少为(h-1)&#x2F;2向上取整，大于等于h&#x2F;2向上取整 -1；高度h-1的叶子节点到该子树根的深度至少为h&#x2F;2向上取整 -1。故而无论是h-1还是h-2，其叶子到总根节点的深度均不小于h&#x2F;2向上取整 -1 +1。证毕。</p><p><strong>本题体现了归纳法在树状结构（顺便一说，二分查找这类的证明题也可视作类树）中的出色发挥。</strong></p><h3 id="41、若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P-1258的majCandidate算法是否还正确？"><a href="#41、若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P-1258的majCandidate算法是否还正确？" class="headerlink" title="41、若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P 1258的majCandidate算法是否还正确？"></a>41、若将众数的定义改为“一半及一半以上的元素同为m，则m为众数”（原定义为：一半以上的元素同为m），课本P 1258的majCandidate算法是否还正确？</h3><p>错误。虽然对于向量长度为奇数时，修改的定义显然与原定义没有区别，但对于向量长度为偶数时，我们很容易便能举出反例：0, 0, 0, 0, 1, 1, 1, 1, 2, 1。其中1是我修改定义后的众数，但算法会认为2是众数的候选者。本例中我们也能看到，算法选取的众数候选者甚至有可能是一个仅出现过一次的龙套元素。</p><h3 id="42、若T-n-x3D-O-n-2-，F-n-x3D-O-n-，则T-n-x2F-F-n-x3D-O-n-2-。"><a href="#42、若T-n-x3D-O-n-2-，F-n-x3D-O-n-，则T-n-x2F-F-n-x3D-O-n-2-。" class="headerlink" title="42、若T(n)&#x3D;O(n^2)，F(n)&#x3D;O(n)，则T(n)&#x2F;F(n)&#x3D;O(n^2)。"></a>42、若T(n)&#x3D;O(n^2)，F(n)&#x3D;O(n)，则T(n)&#x2F;F(n)&#x3D;O(n^2)。</h3><p>错误。事实上复杂度函数可以小于常数如F(n)&#x3D;θ(1&#x2F;n)，对于本课程而言请注意这种可能性的存在。</p><h3 id="43、在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶-x2F-当前运算符组合。"><a href="#43、在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶-x2F-当前运算符组合。" class="headerlink" title="43、在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶&#x2F;当前运算符组合。"></a>43、在中缀表达式求值的时候，优先级表中有对应了非法表达式的空格项，列出所有这样的栈顶&#x2F;当前运算符组合。</h3><p>“(“与”\0”、”)”与所有运算符、”\0”与”)”、”!”与”(“（其中第一个为栈顶运算符，第二个为当前运算符）。即左括号不可能留到最后而不遇到右括号；右括号不可能进入运算符栈；！是单目运算符，不可能直接与左括号相邻。</p><h3 id="44、为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？"><a href="#44、为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？" class="headerlink" title="44、为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？"></a>44、为了实现”在2014个元素中挑选5个最大元素“的功能，在最坏情况下锦标赛树和二叉堆的比较次数相同吗？</h3><p>不相同，后者是前者的二倍。与简单的上滤不同，<strong>每一步下滤需要和左右孩子都比较一番</strong>，而锦标赛树只需比较一次即可。</p><h3 id="45、规模为n的任何两棵等价二叉搜索树，至多经过2n-2-次旋转调整，即可彼此转换。"><a href="#45、规模为n的任何两棵等价二叉搜索树，至多经过2n-2-次旋转调整，即可彼此转换。" class="headerlink" title="45、规模为n的任何两棵等价二叉搜索树，至多经过2n - 2 次旋转调整，即可彼此转换。"></a>45、规模为n的任何两棵等价二叉搜索树，至多经过2n - 2 次旋转调整，即可彼此转换。</h3><p>正确。见习题解析7-15，将任意一棵”最左侧通路“长为s的（博主个人认为这东西几乎就是相对于npl右侧链的左侧链）二叉搜索树转换为一个左倾单链需要n-1-s步旋转。故而可知我们可以将树A先转为单链，再将单链反向转为树B，至多不会超过2n-2次旋转。</p><h3 id="46、对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。"><a href="#46、对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。" class="headerlink" title="46、对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。"></a>46、对不含括号的中缀表达式求值时，操作符栈的容量可以固定为某一常数。</h3><p>正确。对于优先级表中除了左右括号和结束符&#x2F;0之外的操作符，当栈顶和当前运算符均为此操作符时，优先级均为栈顶&gt;当前，故而在不存在括号的情况下，操作符栈不可能堆叠大量运算符；在堆叠了各种不同的操作符后一定会执行运算并开始清楚栈中元素。</p><h3 id="47、带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。"><a href="#47、带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。" class="headerlink" title="47、带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。"></a>47、带权重的最优PFC（前缀无歧义）编码树不仅未必唯一、拓扑结构未必相同，甚至树高也可能不等。</h3><p>正确。对于Huffman算法，若有出现频率相同的字符（或是在合并过程中存在出现频率相同的子树），则会有歧义的发生，这样的歧义虽不会导致Huffman树的最优性，却会导致不同结构的情况，这就是所谓Huffman树的不唯一性（另两个性质是内部节点的双子性和层次性）。至于题中所说的情况，abcd的出现频率分别是2211，这个简单的例子就可以构造出两棵高度不同的Huffman树。</p><h3 id="考后感想"><a href="#考后感想" class="headerlink" title="考后感想"></a>考后感想</h3><p>妈的，设计大题让设计一个括号匹配的数据结构。不会做，二十分白给，寄。</p><p>可能是因为判断题和简答题做的还不错（不过简答题第一题就不会，问的是教材中有些算法为了精简代码而牺牲了效率，根本没记）最后还是拿A-了，邓公太善良了T T</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本文是作者在复习数据结构刷题的时候遇到的简单但不完全简单的小题（大题的话博主已经弃疗了…要杀要刮随邓公了）。dsa知识点相当的多，随便举一些例子吧：主定理、动态规划、向量列表、先序遍历的递归&amp;#x2F;迭代版、AVL树和红黑树、散列冲突、dijkstra、堆合并、KMP算法</summary>
      
    
    
    
    <category term="C++" scheme="http://example.com/categories/C/"/>
    
    
    <category term="C++" scheme="http://example.com/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>搭建个人网站的教程&amp;踩坑实录</title>
    <link href="http://example.com/2023/01/26/blog/"/>
    <id>http://example.com/2023/01/26/blog/</id>
    <published>2023-01-26T09:31:29.540Z</published>
    <updated>2023-04-02T12:35:05.430Z</updated>
    
    <content type="html"><![CDATA[<p>在开始之前先po一下我用的教程：</p><p><a href="https://zhuanlan.zhihu.com/p/102592286">https://zhuanlan.zhihu.com/p/102592286</a></p><p>里面的内容非常详细！即便是纯计算机小白，对着这份教程至多只需两天就可以搭出来（抄出来）一个完成度还可以的个人博客网站！博主大概用了一天左右（虽然实际上是两个小半天…），完成了如您所见的效果…博主小学期没怎么学好，css啥的美化和github还是不太会用，或许过两天还会进一步美化、丰富这个网站！</p><p>总之，博主总结了一下搭建过程中教程几个没有提到的问题，以及博主是如何解决（绕开）这些bug的。博主是第一次记录自己的debug过程，事后再回忆bug一方面没有截图，另一方面可能记忆不够清晰…看来写这种东西得随de随记录：</p><h3 id="教程中“git-push-origin-master”报错"><a href="#教程中“git-push-origin-master”报错" class="headerlink" title="教程中“git push origin master”报错"></a><a href="#git-push%E6%8A%A5%E9%94%99">教程中“git push origin master”报错</a></h3><h3 id="hexo-d报错”spawn-failed”"><a href="#hexo-d报错”spawn-failed”" class="headerlink" title="hexo d报错”spawn failed”"></a><a href="#hexo-d%E6%8A%A5%E9%94%99">hexo d报错”spawn failed”</a></h3><h3 id="在切换主题时（本文中是从next主题换成butterfly）报错"><a href="#在切换主题时（本文中是从next主题换成butterfly）报错" class="headerlink" title="在切换主题时（本文中是从next主题换成butterfly）报错"></a><a href="#%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98%E6%8A%A5%E9%94%99">在切换主题时（本文中是从next主题换成butterfly）报错</a></h3><h4 id="git-push报错"><a href="#git-push报错" class="headerlink" title="git push报错"></a>git push报错</h4><p>在第三篇教程中”git push origin master“一步会报错如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error: src refspec master does not match any error: failed to push some refs to</span><br></pre></td></tr></table></figure><p>简单来说，就是github更新了…把默认分支从master改成了main，把master改成main即可…（感觉带点脑子看教程都不会有这个bug…显然博主没带脑子）。详见：</p><p><a href="https://blog.csdn.net/qq_43142509/article/details/124182138">https://blog.csdn.net/qq_43142509/article/details/124182138</a></p><h4 id="hexo-d报错"><a href="#hexo-d报错" class="headerlink" title="hexo d报错"></a>hexo d报错</h4><p>在hexo d时有类似报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FATAL &#123;</span><br><span class="line">  err: Error: Spawn failed</span><br><span class="line">      at ChildProcess.&lt;anonymous&gt; (D:\Program Files\blog\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">      at ChildProcess.emit (node:events:526:28)</span><br><span class="line">      at ChildProcess.cp.emit (D:\Program Files\blog\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">      at Process.ChildProcess._handle.onexit (node:internal/child_process:291:12) &#123;</span><br><span class="line">    code: 128</span><br><span class="line">  &#125;</span><br><span class="line">&#125; Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><br></pre></td></tr></table></figure><p>在不断改动配置文件的时候hexo三部曲突然在hexo d时报错了…简单粗暴的解决方案是将hexo根目录（即blog文件夹）中的<code>.deploy_git</code>和<code>public</code>直接删除！之后再重跑一遍hexo clean、hexo g和hexo d即可…</p><p>顺便一说，测试的时候最好直接用hexo s，而不是hexo三部曲…后者太慢了…</p><h4 id="切换主题报错"><a href="#切换主题报错" class="headerlink" title="切换主题报错"></a>切换主题报错</h4><p>进入博客时只出现一句”extends includes&#x2F;layout.pug block content include .&#x2F;includes&#x2F;mixins&#x2F;post-ui.pug #recent-posts.recent-posts +postUI include includes&#x2F;pagination.pug“</p><p>简单来说输入如下命令即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-renderer-jade hexo-generator-feed hexo-generator-sitemap hexo-browsersync hexo-generator-archive</span><br></pre></td></tr></table></figure><p>详见知乎：</p><p><a href="https://zhuanlan.zhihu.com/p/137946156">https://zhuanlan.zhihu.com/p/137946156</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在开始之前先po一下我用的教程：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/102592286&quot;&gt;https://zhuanlan.zhihu.com/p/102592286&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;里面的内容非常详细！即便是纯</summary>
      
    
    
    
    <category term="git操作" scheme="http://example.com/categories/git%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hello world!</title>
    <link href="http://example.com/2023/01/25/hello-world/"/>
    <id>http://example.com/2023/01/25/hello-world/</id>
    <published>2023-01-25T09:26:18.091Z</published>
    <updated>2023-04-02T08:39:54.543Z</updated>
    
    <content type="html"><![CDATA[<p>这里是博主闲的没事搭的一个无脑博客！（说是搭建，其实就是直接用butterfly主题…）为此，博主斥九块巨资买了这个域名的一年使用权…美化和功能还在持续更新！</p><p>搭建博客的过程中意识到这个东西真的是小学生都会…纯敲代码真的能赚到钱吗？博主对此表示大大的怀疑…总之，说不定以后博主会不定期地发一些面向小白编程、数学和概率论问题（虽然博主的概率论学的一坨屎…）的帖子，敬请期待！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里是博主闲的没事搭的一个无脑博客！（说是搭建，其实就是直接用butterfly主题…）为此，博主斥九块巨资买了这个域名的一年使用权…美化和功能还在持续更新！&lt;/p&gt;
&lt;p&gt;搭建博客的过程中意识到这个东西真的是小学生都会…纯敲代码真的能赚到钱吗？博主对此表示大大的怀疑…总之</summary>
      
    
    
    
    
  </entry>
  
</feed>
